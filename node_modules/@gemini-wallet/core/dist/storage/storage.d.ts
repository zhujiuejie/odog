import { type IStorage, STORAGE_ETH_ACCOUNTS_KEY, STORAGE_ETH_ACTIVE_CHAIN_KEY, STORAGE_PASSKEY_CREDENTIAL_KEY, STORAGE_SETTINGS_KEY, STORAGE_SMART_ACCOUNT_KEY } from "./storageInterface";
export { STORAGE_ETH_ACCOUNTS_KEY, STORAGE_ETH_ACTIVE_CHAIN_KEY, STORAGE_PASSKEY_CREDENTIAL_KEY, STORAGE_SETTINGS_KEY, STORAGE_SMART_ACCOUNT_KEY, };
/**
 * Default web storage implementation using localStorage
 * For mobile platforms, implement a custom storage class that implements IStorage
 */
export declare class GeminiStorage implements IStorage {
    private readonly scope;
    private readonly module;
    private scopedKey;
    storeObject<T>(key: string, item: T): Promise<void>;
    loadObject<T>(key: string, fallback: T): Promise<T>;
    setItem(key: string, value: string): Promise<void>;
    getItem(key: string): Promise<string | undefined>;
    removeItem(key: string): Promise<void>;
}
//# sourceMappingURL=storage.d.ts.map