import { type Address, type SignMessageParameters, type SignTypedDataParameters, type SwitchChainParameters, type TransactionRequest } from "viem";
import { type Chain, type GeminiProviderConfig, type SendTransactionResponse, type SignMessageResponse, type SignTypedDataResponse } from "@/types";
export declare function isChainSupportedByGeminiSw(chainId: number): boolean;
export declare class GeminiWallet {
    private readonly communicator;
    private readonly storage;
    private initPromise;
    accounts: Address[];
    chain: Chain;
    constructor({ appMetadata, chain, onDisconnectCallback, storage, }: Readonly<GeminiProviderConfig>);
    private initializeFromStorage;
    private ensureInitialized;
    connect(): Promise<Address[]>;
    switchChain({ id, }: SwitchChainParameters): Promise<string | undefined>;
    sendTransaction(txData: TransactionRequest): Promise<SendTransactionResponse["data"]>;
    signData({ message, }: SignMessageParameters): Promise<SignMessageResponse["data"]>;
    signTypedData({ message, types, primaryType, domain, }: SignTypedDataParameters): Promise<SignTypedDataResponse["data"]>;
    openSettings(): Promise<void>;
    private sendMessageToPopup;
}
//# sourceMappingURL=wallet.d.ts.map