"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var j=require("events"),w=require("@walletconnect/utils"),N=require("@walletconnect/universal-provider");function W(n){if(n&&n.__esModule)return n;var t=Object.create(null);return n&&Object.keys(n).forEach(function(e){if(e!=="default"){var s=Object.getOwnPropertyDescriptor(n,e);Object.defineProperty(t,e,s.get?s:{enumerable:!0,get:function(){return n[e]}})}}),t.default=n,Object.freeze(t)}const x="wc",$="ethereum_provider",q=`${x}@2:${$}:`,D="https://rpc.walletconnect.org/v1/",I=["eth_sendTransaction","personal_sign"],_=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_sendCalls","wallet_getCapabilities","wallet_getCallsStatus","wallet_showCallsStatus"],C=["chainChanged","accountsChanged"],P=["chainChanged","accountsChanged","message","disconnect","connect"],U=async()=>{const{createAppKit:n}=await Promise.resolve().then(function(){return W(require("@reown/appkit/core"))});return n};var k=Object.defineProperty,z=Object.defineProperties,L=Object.getOwnPropertyDescriptors,A=Object.getOwnPropertySymbols,Q=Object.prototype.hasOwnProperty,K=Object.prototype.propertyIsEnumerable,O=(n,t,e)=>t in n?k(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e,v=(n,t)=>{for(var e in t||(t={}))Q.call(t,e)&&O(n,e,t[e]);if(A)for(var e of A(t))K.call(t,e)&&O(n,e,t[e]);return n},f=(n,t)=>z(n,L(t)),p=(n,t,e)=>O(n,typeof t!="symbol"?t+"":t,e);function E(n){return Number(n[0].split(":")[1])}function b(n){return`0x${n.toString(16)}`}function V(n){const{chains:t,optionalChains:e,methods:s,optionalMethods:i,events:a,optionalEvents:o,rpcMap:u}=n;if(!w.isValidArray(t))throw new Error("Invalid chains");const c={chains:t,methods:s||I,events:a||C,rpcMap:v({},t.length?{[E(t)]:u[E(t)]}:{})},l=a?.filter(d=>!C.includes(d)),r=s?.filter(d=>!I.includes(d));if(!e&&!o&&!i&&!(l!=null&&l.length)&&!(r!=null&&r.length))return{required:t.length?c:void 0};const m=l?.length&&r?.length||!e,h={chains:[...new Set(m?c.chains.concat(e||[]):e)],methods:[...new Set(c.methods.concat(i!=null&&i.length?i:_))],events:[...new Set(c.events.concat(o!=null&&o.length?o:P))],rpcMap:u};return{required:t.length?c:void 0,optional:e.length?h:void 0}}class y{constructor(){p(this,"events",new j.EventEmitter),p(this,"namespace","eip155"),p(this,"accounts",[]),p(this,"signer"),p(this,"chainId",1),p(this,"modal"),p(this,"rpc"),p(this,"STORAGE_KEY",q),p(this,"on",(t,e)=>(this.events.on(t,e),this)),p(this,"once",(t,e)=>(this.events.once(t,e),this)),p(this,"removeListener",(t,e)=>(this.events.removeListener(t,e),this)),p(this,"off",(t,e)=>(this.events.off(t,e),this)),p(this,"parseAccount",t=>this.isCompatibleChainId(t)?this.parseAccountId(t).address:t),this.signer={},this.rpc={}}static async init(t){const e=new y;return await e.initialize(t),e}async request(t,e){return await this.signer.request(t,this.formatChainId(this.chainId),e)}sendAsync(t,e,s){this.signer.sendAsync(t,e,this.formatChainId(this.chainId),s)}get connected(){return this.signer.client?this.signer.client.core.relayer.connected:!1}get connecting(){return this.signer.client?this.signer.client.core.relayer.connecting:!1}async enable(){return this.session||await this.connect(),await this.request({method:"eth_requestAccounts"})}async connect(t){var e;if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts(t);const{required:s,optional:i}=V(this.rpc);try{const a=await new Promise(async(u,c)=>{var l,r;this.rpc.showQrModal&&((l=this.modal)==null||l.open(),(r=this.modal)==null||r.subscribeState(h=>{!h.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),c(new Error("Connection request reset. Please try again.")))}));const m=t!=null&&t.scopedProperties?{[this.namespace]:t.scopedProperties}:void 0;await this.signer.connect(f(v({namespaces:v({},s&&{[this.namespace]:s})},i&&{optionalNamespaces:{[this.namespace]:i}}),{pairingTopic:t?.pairingTopic,scopedProperties:m})).then(h=>{u(h)}).catch(h=>{var d;(d=this.modal)==null||d.showErrorMessage("Unable to connect"),c(new Error(h.message))})});if(!a)return;const o=w.getAccountsFromNamespaces(a.namespaces,[this.namespace]);this.setChainIds(this.rpc.chains.length?this.rpc.chains:o),this.setAccounts(o),this.events.emit("connect",{chainId:b(this.chainId)})}catch(a){throw this.signer.logger.error(a),a}finally{(e=this.modal)==null||e.close()}}async authenticate(t,e){var s;if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts({chains:t?.chains});try{const i=await new Promise(async(o,u)=>{var c,l;this.rpc.showQrModal&&((c=this.modal)==null||c.open(),(l=this.modal)==null||l.subscribeState(r=>{!r.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),u(new Error("Connection request reset. Please try again.")))})),await this.signer.authenticate(f(v({},t),{chains:this.rpc.chains}),e).then(r=>{o(r)}).catch(r=>{var m;(m=this.modal)==null||m.showErrorMessage("Unable to connect"),u(new Error(r.message))})}),a=i.session;if(a){const o=w.getAccountsFromNamespaces(a.namespaces,[this.namespace]);this.setChainIds(this.rpc.chains.length?this.rpc.chains:o),this.setAccounts(o),this.events.emit("connect",{chainId:b(this.chainId)})}return i}catch(i){throw this.signer.logger.error(i),i}finally{(s=this.modal)==null||s.close()}}async disconnect(){this.session&&await this.signer.disconnect(),this.reset()}get isWalletConnect(){return!0}get session(){return this.signer.session}registerEventListeners(){this.signer.on("session_event",t=>{const{params:e}=t,{event:s}=e;s.name==="accountsChanged"?(this.accounts=this.parseAccounts(s.data),this.events.emit("accountsChanged",this.accounts)):s.name==="chainChanged"?this.setChainId(this.formatChainId(s.data)):this.events.emit(s.name,s.data),this.events.emit("session_event",t)}),this.signer.on("accountsChanged",t=>{this.accounts=this.parseAccounts(t),this.events.emit("accountsChanged",this.accounts)}),this.signer.on("chainChanged",t=>{const e=parseInt(t);this.chainId=e,this.events.emit("chainChanged",b(this.chainId)),this.persist()}),this.signer.on("session_update",t=>{this.events.emit("session_update",t)}),this.signer.on("session_delete",t=>{this.reset(),this.events.emit("session_delete",t),this.events.emit("disconnect",f(v({},w.getSdkError("USER_DISCONNECTED")),{data:t.topic,name:"USER_DISCONNECTED"}))}),this.signer.on("display_uri",t=>{this.events.emit("display_uri",t)})}switchEthereumChain(t){this.request({method:"wallet_switchEthereumChain",params:[{chainId:t.toString(16)}]})}isCompatibleChainId(t){return typeof t=="string"?t.startsWith(`${this.namespace}:`):!1}formatChainId(t){return`${this.namespace}:${t}`}parseChainId(t){return Number(t.split(":")[1])}setChainIds(t){const e=t.filter(s=>this.isCompatibleChainId(s)).map(s=>this.parseChainId(s));e.length&&(this.chainId=e[0],this.events.emit("chainChanged",b(this.chainId)),this.persist())}setChainId(t){if(this.isCompatibleChainId(t)){const e=this.parseChainId(t);this.chainId=e,this.switchEthereumChain(e)}}parseAccountId(t){const[e,s,i]=t.split(":");return{chainId:`${e}:${s}`,address:i}}setAccounts(t){this.accounts=t.filter(e=>this.parseChainId(this.parseAccountId(e).chainId)===this.chainId).map(e=>this.parseAccountId(e).address),this.events.emit("accountsChanged",this.accounts)}getRpcConfig(t){var e,s;const i=(e=t?.chains)!=null?e:[],a=(s=t?.optionalChains)!=null?s:[],o=i.concat(a);if(!o.length)throw new Error("No chains specified in either `chains` or `optionalChains`");const u=i.length?t?.methods||I:[],c=i.length?t?.events||C:[],l=t?.optionalMethods||[],r=t?.optionalEvents||[],m=t?.rpcMap||this.buildRpcMap(o,t.projectId),h=t?.qrModalOptions||void 0;return{chains:i?.map(d=>this.formatChainId(d)),optionalChains:a.map(d=>this.formatChainId(d)),methods:u,events:c,optionalMethods:l,optionalEvents:r,rpcMap:m,showQrModal:!!(t!=null&&t.showQrModal),qrModalOptions:h,projectId:t.projectId,metadata:t.metadata}}buildRpcMap(t,e){const s={};return t.forEach(i=>{s[i]=this.getRpcUrl(i,e)}),s}async initialize(t){if(this.rpc=this.getRpcConfig(t),this.chainId=this.rpc.chains.length?E(this.rpc.chains):E(this.rpc.optionalChains),this.signer=await N.UniversalProvider.init({projectId:this.rpc.projectId,metadata:this.rpc.metadata,disableProviderPing:t.disableProviderPing,relayUrl:t.relayUrl,storage:t.storage,storageOptions:t.storageOptions,customStoragePrefix:t.customStoragePrefix,telemetryEnabled:t.telemetryEnabled,logger:t.logger}),this.registerEventListeners(),await this.loadPersistedSession(),this.rpc.showQrModal){let e;try{const s=await U(),{convertWCMToAppKitOptions:i}=await Promise.resolve().then(function(){return nt}),a=i(f(v({},this.rpc.qrModalOptions),{chains:[...new Set([...this.rpc.chains,...this.rpc.optionalChains])],metadata:this.rpc.metadata,projectId:this.rpc.projectId}));if(!a.networks.length)throw new Error("No networks found for WalletConnect\xB7");e=s(f(v({},a),{universalProvider:this.signer,manualWCControl:!0}))}catch(s){throw console.warn(s),new Error("To use QR modal, please install @reown/appkit package")}if(e)try{this.modal=e}catch(s){throw this.signer.logger.error(s),new Error("Could not generate WalletConnectModal Instance")}}}loadConnectOpts(t){if(!t)return;const{chains:e,optionalChains:s,rpcMap:i}=t;e&&w.isValidArray(e)&&(this.rpc.chains=e.map(a=>this.formatChainId(a)),e.forEach(a=>{this.rpc.rpcMap[a]=i?.[a]||this.getRpcUrl(a)})),s&&w.isValidArray(s)&&(this.rpc.optionalChains=[],this.rpc.optionalChains=s?.map(a=>this.formatChainId(a)),s.forEach(a=>{this.rpc.rpcMap[a]=i?.[a]||this.getRpcUrl(a)}))}getRpcUrl(t,e){var s;return((s=this.rpc.rpcMap)==null?void 0:s[t])||`${D}?chainId=eip155:${t}&projectId=${e||this.rpc.projectId}`}async loadPersistedSession(){if(this.session)try{const t=await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`),e=this.session.namespaces[`${this.namespace}:${t}`]?this.session.namespaces[`${this.namespace}:${t}`]:this.session.namespaces[this.namespace];this.setChainIds(t?[this.formatChainId(t)]:e?.accounts),this.setAccounts(e?.accounts)}catch(t){this.signer.logger.error("Failed to load persisted session, clearing state..."),this.signer.logger.error(t),await this.disconnect().catch(e=>this.signer.logger.warn(e))}}reset(){this.chainId=1,this.accounts=[]}persist(){this.session&&this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`,this.chainId)}parseAccounts(t){return typeof t=="string"||t instanceof String?[this.parseAccount(t)]:t.map(e=>this.parseAccount(e))}}const H=y;var G=Object.defineProperty,Y=Object.defineProperties,F=Object.getOwnPropertyDescriptors,M=Object.getOwnPropertySymbols,B=Object.prototype.hasOwnProperty,X=Object.prototype.propertyIsEnumerable,T=(n,t,e)=>t in n?G(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e,S=(n,t)=>{for(var e in t||(t={}))B.call(t,e)&&T(n,e,t[e]);if(M)for(var e of M(t))X.call(t,e)&&T(n,e,t[e]);return n},J=(n,t)=>Y(n,F(t));function Z(n){if(n)return{"--w3m-font-family":n["--wcm-font-family"],"--w3m-accent":n["--wcm-accent-color"],"--w3m-color-mix":n["--wcm-background-color"],"--w3m-z-index":n["--wcm-z-index"]?Number(n["--wcm-z-index"]):void 0,"--w3m-qr-color":n["--wcm-accent-color"],"--w3m-font-size-master":n["--wcm-text-medium-regular-size"],"--w3m-border-radius-master":n["--wcm-container-border-radius"],"--w3m-color-mix-strength":0}}const tt=n=>{const[t,e]=n.split(":");return R({id:e,caipNetworkId:n,chainNamespace:t,name:"",nativeCurrency:{name:"",symbol:"",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}}})};function et(n){var t,e,s,i,a,o,u;const c=(t=n.chains)==null?void 0:t.map(tt).filter(Boolean);if(c.length===0)throw new Error("At least one chain must be specified");const l=c.find(m=>{var h;return m.id===((h=n.defaultChain)==null?void 0:h.id)}),r={projectId:n.projectId,networks:c,themeMode:n.themeMode,themeVariables:Z(n.themeVariables),chainImages:n.chainImages,connectorImages:n.walletImages,defaultNetwork:l,metadata:J(S({},n.metadata),{name:((e=n.metadata)==null?void 0:e.name)||"WalletConnect",description:((s=n.metadata)==null?void 0:s.description)||"Connect to WalletConnect-compatible wallets",url:((i=n.metadata)==null?void 0:i.url)||"https://walletconnect.org",icons:((a=n.metadata)==null?void 0:a.icons)||["https://walletconnect.org/walletconnect-logo.png"]}),showWallets:!0,featuredWalletIds:n.explorerRecommendedWalletIds==="NONE"?[]:Array.isArray(n.explorerRecommendedWalletIds)?n.explorerRecommendedWalletIds:[],excludeWalletIds:n.explorerExcludedWalletIds==="ALL"?[]:Array.isArray(n.explorerExcludedWalletIds)?n.explorerExcludedWalletIds:[],enableEIP6963:!1,enableInjected:!1,enableCoinbase:!0,enableWalletConnect:!0,features:{email:!1,socials:!1}};if((o=n.mobileWallets)!=null&&o.length||(u=n.desktopWallets)!=null&&u.length){const m=[...(n.mobileWallets||[]).map(g=>({id:g.id,name:g.name,links:g.links})),...(n.desktopWallets||[]).map(g=>({id:g.id,name:g.name,links:{native:g.links.native,universal:g.links.universal}}))],h=[...r.featuredWalletIds||[],...r.excludeWalletIds||[]],d=m.filter(g=>!h.includes(g.id));d.length&&(r.customWallets=d)}return r}function R(n){return S({formatters:void 0,fees:void 0,serializers:void 0},n)}var nt=Object.freeze({__proto__:null,convertWCMToAppKitOptions:et,defineChain:R});exports.EthereumProvider=H,exports.OPTIONAL_EVENTS=P,exports.OPTIONAL_METHODS=_,exports.REQUIRED_EVENTS=C,exports.REQUIRED_METHODS=I,exports.default=y;
//# sourceMappingURL=index.cjs.js.map
