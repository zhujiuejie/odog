{"version":3,"file":"index.native.js","sources":["../src/constants/values.ts","../src/constants/rpc.ts","../src/utils/appkit.native.ts","../src/EthereumProvider.ts","../src/index.ts","../src/wcmToAppKit.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"ethereum_provider\";\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\nexport const RPC_URL = \"https://rpc.walletconnect.org/v1/\";\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\nexport const OPTIONAL_METHODS = [\n  \"eth_accounts\",\n  \"eth_requestAccounts\",\n  \"eth_sendRawTransaction\",\n  \"eth_sign\",\n  \"eth_signTransaction\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"eth_sendTransaction\",\n  \"personal_sign\",\n  \"wallet_switchEthereumChain\",\n  \"wallet_addEthereumChain\",\n  \"wallet_getPermissions\",\n  \"wallet_requestPermissions\",\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\",\n  \"wallet_scanQRCode\",\n  \"wallet_sendCalls\",\n  \"wallet_getCapabilities\",\n  \"wallet_getCallsStatus\",\n  \"wallet_showCallsStatus\",\n];\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\nexport const OPTIONAL_EVENTS = [\n  \"chainChanged\",\n  \"accountsChanged\",\n  \"message\",\n  \"disconnect\",\n  \"connect\",\n];\n","export const getAppkit = () => {\n  throw new Error(\"@reown/appkit is not supported on native\");\n};\n","import { EventEmitter } from \"events\";\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\nimport {\n  IEthereumProvider as IProvider,\n  IEthereumProviderEvents,\n  ProviderAccounts,\n  RequestArguments,\n  QrModalOptions,\n} from \"./types\";\nimport {\n  Metadata,\n  Namespace,\n  UniversalProvider,\n  UniversalProviderOpts,\n} from \"@walletconnect/universal-provider\";\nimport { AuthTypes, SessionTypes, SignClientTypes } from \"@walletconnect/types\";\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\nimport {\n  STORAGE_KEY,\n  REQUIRED_METHODS,\n  REQUIRED_EVENTS,\n  RPC_URL,\n  OPTIONAL_METHODS,\n  OPTIONAL_EVENTS,\n} from \"./constants\";\nimport { getAppkit } from \"./utils/appkit\";\n\nexport type RpcMethod =\n  | \"personal_sign\"\n  | \"eth_sendTransaction\"\n  | \"eth_accounts\"\n  | \"eth_requestAccounts\"\n  | \"eth_call\"\n  | \"eth_getBalance\"\n  | \"eth_sendRawTransaction\"\n  | \"eth_sign\"\n  | \"eth_signTransaction\"\n  | \"eth_signTypedData\"\n  | \"eth_signTypedData_v3\"\n  | \"eth_signTypedData_v4\"\n  | \"wallet_switchEthereumChain\"\n  | \"wallet_addEthereumChain\"\n  | \"wallet_getPermissions\"\n  | \"wallet_requestPermissions\"\n  | \"wallet_registerOnboarding\"\n  | \"wallet_watchAsset\"\n  | \"wallet_scanQRCode\"\n  | \"wallet_sendCalls\"\n  | \"wallet_getCapabilities\"\n  | \"wallet_getCallsStatus\"\n  | \"wallet_showCallsStatus\";\n\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\n\nexport interface EthereumRpcMap {\n  [chainId: string]: string;\n}\n\nexport interface SessionEvent {\n  event: { name: string; data: any };\n  chainId: string;\n}\n\nexport interface EthereumRpcConfig {\n  chains: string[];\n  optionalChains: string[];\n  methods: string[];\n  optionalMethods?: string[];\n  /**\n   * @description Events that the wallet MUST support or the connection will be rejected\n   */\n  events: string[];\n  optionalEvents?: string[];\n  rpcMap: EthereumRpcMap;\n  projectId: string;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n}\nexport interface ConnectOps {\n  chains?: number[];\n  optionalChains?: number[];\n  rpcMap?: EthereumRpcMap;\n  pairingTopic?: string;\n  scopedProperties?: unknown;\n}\n\nexport type AuthenticateParams = {\n  chains?: number[];\n} & Omit<AuthTypes.SessionAuthenticateParams, \"chains\">;\n\nexport interface IEthereumProvider extends IProvider {\n  connect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n  return `0x${chainId.toString(16)}`;\n}\n\nexport type NamespacesParams = {\n  chains: EthereumRpcConfig[\"chains\"];\n  optionalChains: EthereumRpcConfig[\"optionalChains\"];\n  methods?: EthereumRpcConfig[\"methods\"];\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\n  events?: EthereumRpcConfig[\"events\"];\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\n  optionalEvents?: EthereumRpcConfig[\"events\"];\n};\n\nexport function buildNamespaces(params: NamespacesParams): {\n  required?: Namespace;\n  optional?: Namespace;\n} {\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\n    params;\n  if (!isValidArray(chains)) {\n    throw new Error(\"Invalid chains\");\n  }\n\n  const required: Namespace = {\n    chains,\n    methods: methods || REQUIRED_METHODS,\n    events: events || REQUIRED_EVENTS,\n    rpcMap: {\n      ...(chains.length\n        ? { [getEthereumChainId(chains)]: rpcMap[getEthereumChainId(chains)] }\n        : {}),\n    },\n  };\n\n  // make a list of events and methods that require additional permissions\n  // so we know if we should to include the required chains in the optional namespace\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\n\n  if (\n    !optionalChains &&\n    !optionalEvents &&\n    !optionalMethods &&\n    !eventsRequiringPermissions?.length &&\n    !methodsRequiringPermissions?.length\n  ) {\n    return { required: chains.length ? required : undefined };\n  }\n\n  /*\n   * decides whether or not to include the required chains in the optional namespace\n   * use case: if there is a single chain as required but additional methods/events as optional\n   */\n  const shouldIncludeRequiredChains =\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\n\n  const optional: Namespace = {\n    chains: [\n      ...new Set(\n        shouldIncludeRequiredChains ? required.chains.concat(optionalChains || []) : optionalChains,\n      ),\n    ],\n    methods: [\n      ...new Set(\n        required.methods.concat(optionalMethods?.length ? optionalMethods : OPTIONAL_METHODS),\n      ),\n    ],\n    events: [\n      ...new Set(required.events.concat(optionalEvents?.length ? optionalEvents : OPTIONAL_EVENTS)),\n    ],\n    rpcMap,\n  };\n\n  return {\n    required: chains.length ? required : undefined,\n    optional: optionalChains.length ? optional : undefined,\n  };\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\n/**\n * @param {number[]} chains - The Chains your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\n * @param {number[]} optionalChains - The Chains your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\n * @description either chains or optionalChains must be provided\n */\nexport type ChainsProps =\n  | {\n      chains: ArrayOneOrMore<number>;\n      optionalChains?: number[];\n    }\n  | {\n      chains?: number[];\n      optionalChains: ArrayOneOrMore<number>;\n    };\n\nexport type EthereumProviderOptions = {\n  projectId: string;\n  /**\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\n   */\n  methods?: string[];\n  /**\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\n   */\n  optionalMethods?: string[];\n  events?: string[];\n  optionalEvents?: string[];\n  rpcMap?: EthereumRpcMap;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n  disableProviderPing?: boolean;\n  relayUrl?: string;\n  storageOptions?: KeyValueStorageOptions;\n} & ChainsProps &\n  UniversalProviderOpts;\n\nexport class EthereumProvider implements IEthereumProvider {\n  public events = new EventEmitter();\n  public namespace = \"eip155\";\n  public accounts: string[] = [];\n  public signer: InstanceType<typeof UniversalProvider>;\n  public chainId = 1;\n  public modal?: any;\n\n  protected rpc: EthereumRpcConfig;\n  protected readonly STORAGE_KEY = STORAGE_KEY;\n\n  constructor() {\n    // assigned during initialize\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\n    this.rpc = {} as EthereumRpcConfig;\n  }\n\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\n    const provider = new EthereumProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n\n  public async request<T = unknown>(args: RequestArguments, expiry?: number): Promise<T> {\n    return await this.signer.request(args, this.formatChainId(this.chainId), expiry);\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: JsonRpcResult) => void,\n    expiry?: number,\n  ): void {\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId), expiry);\n  }\n\n  get connected(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connected;\n  }\n\n  get connecting(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connecting;\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.session) await this.connect();\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\n    return accounts as ProviderAccounts;\n  }\n\n  public async connect(opts?: ConnectOps): Promise<void> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts(opts);\n    const { required, optional } = buildNamespaces(this.rpc);\n    try {\n      const session = await new Promise<SessionTypes.Struct | undefined>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.open();\n\n            this.modal?.subscribeState((state: { open: boolean }) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          const scopedProperties = opts?.scopedProperties\n            ? { [this.namespace]: opts.scopedProperties }\n            : undefined;\n\n          await this.signer\n            .connect({\n              namespaces: {\n                ...(required && {\n                  [this.namespace]: required,\n                }),\n              },\n              ...(optional && {\n                optionalNamespaces: {\n                  [this.namespace]: optional,\n                },\n              }),\n              pairingTopic: opts?.pairingTopic,\n              scopedProperties,\n            })\n            .then((session?: SessionTypes.Struct) => {\n              resolve(session);\n            })\n            .catch((error: Error) => {\n              this.modal?.showErrorMessage(\"Unable to connect\");\n              reject(new Error(error.message));\n            });\n        },\n      );\n\n      if (!session) return;\n\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n      // if no required chains are set, use the approved accounts to fetch chainIds\n      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n      this.setAccounts(accounts);\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      this.modal?.close();\n    }\n  }\n\n  public async authenticate(\n    params: AuthenticateParams,\n    walletUniversalLink?: string,\n  ): Promise<AuthTypes.AuthenticateResponseResult | undefined> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts({\n      chains: params?.chains,\n    });\n\n    try {\n      const result = await new Promise<AuthTypes.AuthenticateResponseResult>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.open();\n            this.modal?.subscribeState((state: { open: boolean }) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .authenticate(\n              {\n                ...params,\n                chains: this.rpc.chains,\n              },\n              walletUniversalLink,\n            )\n            .then((result: AuthTypes.AuthenticateResponseResult) => {\n              resolve(result);\n            })\n            .catch((error: Error) => {\n              this.modal?.showErrorMessage(\"Unable to connect\");\n              reject(new Error(error.message));\n            });\n        },\n      );\n\n      const session = result.session;\n      if (session) {\n        const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n        // if no required chains are set, use the approved accounts to fetch chainIds as both contain <namespace>:<chainId>\n        this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n        this.setAccounts(accounts);\n\n        this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n      }\n\n      return result;\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      this.modal?.close();\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.session) {\n      await this.signer.disconnect();\n    }\n    this.reset();\n  }\n\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\n    this.events.on(event, listener);\n    return this;\n  };\n\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\n    this.events.once(event, listener);\n    return this;\n  };\n\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\n    this.events.removeListener(event, listener);\n    return this;\n  };\n\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\n    this.events.off(event, listener);\n    return this;\n  };\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get session() {\n    return this.signer.session;\n  }\n\n  // ---------- Protected --------------------------------------------- //\n\n  protected registerEventListeners() {\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      const { params } = payload;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.accounts = this.parseAccounts(event.data);\n        this.events.emit(\"accountsChanged\", this.accounts);\n      } else if (event.name === \"chainChanged\") {\n        this.setChainId(this.formatChainId(event.data));\n      } else {\n        this.events.emit(event.name as any, event.data);\n      }\n      this.events.emit(\"session_event\", payload);\n    });\n\n    this.signer.on(\"accountsChanged\", (accounts: string[]) => {\n      this.accounts = this.parseAccounts(accounts);\n      this.events.emit(\"accountsChanged\", this.accounts);\n    });\n\n    this.signer.on(\"chainChanged\", (chainId: string) => {\n      const chain = parseInt(chainId);\n      this.chainId = chain;\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    });\n\n    this.signer.on(\n      \"session_update\",\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\n        this.events.emit(\"session_update\", payload);\n      },\n    );\n\n    this.signer.on(\n      \"session_delete\",\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\n        this.reset();\n        this.events.emit(\"session_delete\", payload);\n        this.events.emit(\"disconnect\", {\n          ...getSdkError(\"USER_DISCONNECTED\"),\n          data: payload.topic,\n          name: \"USER_DISCONNECTED\",\n        });\n      },\n    );\n\n    this.signer.on(\"display_uri\", (uri: string) => {\n      this.events.emit(\"display_uri\", uri);\n    });\n  }\n\n  protected switchEthereumChain(chainId: number): void {\n    this.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainId.toString(16) }],\n    });\n  }\n\n  protected isCompatibleChainId(chainId: string): boolean {\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\n  }\n\n  protected formatChainId(chainId: number): string {\n    return `${this.namespace}:${chainId}`;\n  }\n\n  protected parseChainId(chainId: string): number {\n    return Number(chainId.split(\":\")[1]);\n  }\n\n  protected setChainIds(chains: string[]) {\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\n    const chainIds = compatible.map((c) => this.parseChainId(c));\n    if (chainIds.length) {\n      this.chainId = chainIds[0];\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    }\n  }\n\n  protected setChainId(chain: string) {\n    if (this.isCompatibleChainId(chain)) {\n      const chainId = this.parseChainId(chain);\n      this.chainId = chainId;\n      this.switchEthereumChain(chainId);\n    }\n  }\n\n  protected parseAccountId(account: string): { chainId: string; address: string } {\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n    return { chainId, address };\n  }\n\n  protected setAccounts(accounts: string[]) {\n    this.accounts = accounts\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\n      .map((x) => this.parseAccountId(x).address);\n    this.events.emit(\"accountsChanged\", this.accounts);\n  }\n\n  protected getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\n    const requiredChains = opts?.chains ?? [];\n    const optionalChains = opts?.optionalChains ?? [];\n    const allChains = requiredChains.concat(optionalChains);\n    if (!allChains.length)\n      throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n    const requiredMethods = requiredChains.length ? opts?.methods || REQUIRED_METHODS : [];\n    const requiredEvents = requiredChains.length ? opts?.events || REQUIRED_EVENTS : [];\n    const optionalMethods = opts?.optionalMethods || [];\n    const optionalEvents = opts?.optionalEvents || [];\n    const rpcMap = opts?.rpcMap || this.buildRpcMap(allChains, opts.projectId);\n    const qrModalOptions = opts?.qrModalOptions || undefined;\n    return {\n      chains: requiredChains?.map((chain: number) => this.formatChainId(chain)),\n      optionalChains: optionalChains.map((chain: number) => this.formatChainId(chain)),\n      methods: requiredMethods,\n      events: requiredEvents,\n      optionalMethods,\n      optionalEvents,\n      rpcMap,\n      showQrModal: Boolean(opts?.showQrModal),\n      qrModalOptions,\n      projectId: opts.projectId,\n      metadata: opts.metadata,\n    };\n  }\n\n  protected buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\n    const map: EthereumRpcMap = {};\n    chains.forEach((chain) => {\n      map[chain] = this.getRpcUrl(chain, projectId);\n    });\n    return map;\n  }\n\n  protected async initialize(opts: EthereumProviderOptions) {\n    this.rpc = this.getRpcConfig(opts);\n\n    this.chainId = this.rpc.chains.length\n      ? getEthereumChainId(this.rpc.chains)\n      : getEthereumChainId(this.rpc.optionalChains);\n    this.signer = await UniversalProvider.init({\n      projectId: this.rpc.projectId,\n      metadata: this.rpc.metadata,\n      disableProviderPing: opts.disableProviderPing,\n      relayUrl: opts.relayUrl,\n      storage: opts.storage,\n      storageOptions: opts.storageOptions,\n      customStoragePrefix: opts.customStoragePrefix,\n      telemetryEnabled: opts.telemetryEnabled,\n      logger: opts.logger,\n    });\n    this.registerEventListeners();\n    await this.loadPersistedSession();\n    if (this.rpc.showQrModal) {\n      let appKit;\n      try {\n        const createAppKit = await getAppkit();\n        const { convertWCMToAppKitOptions } = await import(\"./wcmToAppKit\");\n        const options = convertWCMToAppKitOptions({\n          ...this.rpc.qrModalOptions,\n          chains: [...new Set([...this.rpc.chains, ...this.rpc.optionalChains])],\n          metadata: this.rpc.metadata,\n          projectId: this.rpc.projectId,\n        });\n\n        if (!options.networks.length) {\n          throw new Error(\"No networks found for WalletConnect·\");\n        }\n\n        appKit = createAppKit({\n          ...options,\n          universalProvider: this.signer as any,\n          manualWCControl: true,\n        });\n      } catch (e) {\n        console.warn(e);\n        throw new Error(\"To use QR modal, please install @reown/appkit package\");\n      }\n      if (appKit) {\n        try {\n          this.modal = appKit;\n        } catch (e) {\n          this.signer.logger.error(e);\n          throw new Error(\"Could not generate WalletConnectModal Instance\");\n        }\n      }\n    }\n  }\n\n  protected loadConnectOpts(opts?: ConnectOps) {\n    if (!opts) return;\n    const { chains, optionalChains, rpcMap } = opts;\n    if (chains && isValidArray(chains)) {\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\n      chains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n    if (optionalChains && isValidArray(optionalChains)) {\n      this.rpc.optionalChains = [];\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\n      optionalChains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n  }\n\n  protected getRpcUrl(chainId: number, projectId?: string): string {\n    const providedRpc = this.rpc.rpcMap?.[chainId];\n    return (\n      providedRpc ||\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\n    );\n  }\n\n  protected async loadPersistedSession() {\n    if (!this.session) return;\n    try {\n      const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\n\n      // cater to both inline & nested namespace formats\n      const namespace = this.session.namespaces[`${this.namespace}:${chainId}`]\n        ? this.session.namespaces[`${this.namespace}:${chainId}`]\n        : this.session.namespaces[this.namespace];\n\n      this.setChainIds(chainId ? [this.formatChainId(chainId)] : namespace?.accounts);\n      this.setAccounts(namespace?.accounts);\n    } catch (error) {\n      this.signer.logger.error(\"Failed to load persisted session, clearing state...\");\n      this.signer.logger.error(error);\n      await this.disconnect().catch((error) => this.signer.logger.warn(error));\n    }\n  }\n\n  protected reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n\n  protected persist() {\n    if (!this.session) return;\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n  }\n\n  protected parseAccounts(payload: string | string[]): string[] {\n    if (typeof payload === \"string\" || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map((account: string) => this.parseAccount(account));\n  }\n\n  protected parseAccount = (payload: any): string => {\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\n  };\n}\n\nexport default EthereumProvider;\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\nexport const EthereumProvider = Provider;\nexport type { EthereumProviderOptions, RpcEvent, RpcMethod } from \"./EthereumProvider\";\nexport * from \"./constants/rpc\";\nexport default Provider;\n","import type { AppKitOptions, CaipNetwork, CaipNetworkId } from \"@reown/appkit\";\nimport type { WalletConnectModalConfig } from \"./types\";\nimport type { AppKitNetwork } from \"@reown/appkit/networks\";\nimport type { EthereumProviderOptions } from \"./EthereumProvider\";\nimport type { Assign, ChainFormatters, Prettify } from \"viem\";\n\nfunction convertThemeVariables(\n  wcmTheme?: WalletConnectModalConfig[\"themeVariables\"],\n): AppKitOptions[\"themeVariables\"] | undefined {\n  if (!wcmTheme) return undefined;\n\n  return {\n    \"--w3m-font-family\": wcmTheme[\"--wcm-font-family\"],\n    \"--w3m-accent\": wcmTheme[\"--wcm-accent-color\"],\n    \"--w3m-color-mix\": wcmTheme[\"--wcm-background-color\"],\n    \"--w3m-z-index\": wcmTheme[\"--wcm-z-index\"] ? Number(wcmTheme[\"--wcm-z-index\"]) : undefined,\n\n    \"--w3m-qr-color\": wcmTheme[\"--wcm-accent-color\"],\n\n    \"--w3m-font-size-master\": wcmTheme[\"--wcm-text-medium-regular-size\"],\n    \"--w3m-border-radius-master\": wcmTheme[\"--wcm-container-border-radius\"],\n    \"--w3m-color-mix-strength\": 0,\n  };\n}\n\nconst mapCaipIdToAppKitCaipNetwork = (caipId: CaipNetworkId): CaipNetwork => {\n  const [namespace, chainId] = caipId.split(\":\");\n  const chain = defineChain({\n    id: chainId,\n    caipNetworkId: caipId,\n    chainNamespace: namespace as CaipNetwork[\"chainNamespace\"],\n    name: \"\",\n    nativeCurrency: {\n      name: \"\",\n      symbol: \"\",\n      decimals: 8,\n    },\n    rpcUrls: {\n      default: { http: [\"https://rpc.walletconnect.org/v1\"] },\n    },\n  });\n\n  return chain as CaipNetwork;\n};\n\nexport function convertWCMToAppKitOptions(\n  wcmConfig: WalletConnectModalConfig & { metadata?: EthereumProviderOptions[\"metadata\"] },\n): AppKitOptions {\n  // Convert chains toCaipNetwork format\n  const networks: CaipNetwork[] = (wcmConfig.chains as CaipNetworkId[])\n    ?.map(mapCaipIdToAppKitCaipNetwork)\n    .filter(Boolean);\n\n  // Ensure at least one network is present\n  if (networks.length === 0) {\n    throw new Error(\"At least one chain must be specified\");\n  }\n\n  const defaultNetwork = networks.find((network) => network.id === wcmConfig.defaultChain?.id);\n  const appKitOptions: AppKitOptions = {\n    projectId: wcmConfig.projectId,\n    networks: networks as [AppKitNetwork, ...AppKitNetwork[]],\n    themeMode: wcmConfig.themeMode,\n    themeVariables: convertThemeVariables(wcmConfig.themeVariables),\n    chainImages: wcmConfig.chainImages,\n    connectorImages: wcmConfig.walletImages,\n    defaultNetwork,\n    metadata: {\n      ...wcmConfig.metadata,\n      name: wcmConfig.metadata?.name || \"WalletConnect\",\n      description: wcmConfig.metadata?.description || \"Connect to WalletConnect-compatible wallets\",\n      url: wcmConfig.metadata?.url || \"https://walletconnect.org\",\n      icons: wcmConfig.metadata?.icons || [\"https://walletconnect.org/walletconnect-logo.png\"],\n    },\n    showWallets: true,\n    // Explorer options mapping\n    featuredWalletIds:\n      wcmConfig.explorerRecommendedWalletIds === \"NONE\"\n        ? []\n        : Array.isArray(wcmConfig.explorerRecommendedWalletIds)\n          ? wcmConfig.explorerRecommendedWalletIds\n          : [],\n\n    excludeWalletIds:\n      wcmConfig.explorerExcludedWalletIds === \"ALL\"\n        ? []\n        : Array.isArray(wcmConfig.explorerExcludedWalletIds)\n          ? wcmConfig.explorerExcludedWalletIds\n          : [],\n\n    // Additional AppKit-specific options that don't have direct WCM equivalents\n    enableEIP6963: false, // Disable 6963 by default\n    enableInjected: false, // Disable injected by default\n    enableCoinbase: true, // Default to true\n    enableWalletConnect: true, // Default to true,\n    features: {\n      email: false,\n      socials: false,\n    },\n  };\n\n  // Add mobile and desktop wallets as custom wallets if provided\n  if (wcmConfig.mobileWallets?.length || wcmConfig.desktopWallets?.length) {\n    const customWallets = [\n      ...(wcmConfig.mobileWallets || []).map((wallet) => ({\n        id: wallet.id,\n        name: wallet.name,\n        links: wallet.links,\n      })),\n      ...(wcmConfig.desktopWallets || []).map((wallet) => ({\n        id: wallet.id,\n        name: wallet.name,\n        links: {\n          native: wallet.links.native,\n          universal: wallet.links.universal,\n        },\n      })),\n    ];\n\n    const allWallets = [\n      ...(appKitOptions.featuredWalletIds || []),\n      ...(appKitOptions.excludeWalletIds || []),\n    ];\n\n    // Only add a custom wallet if it's not on the other lists\n    const uniqueCustomWallets = customWallets.filter((wallet) => !allWallets.includes(wallet.id));\n\n    if (uniqueCustomWallets.length) {\n      appKitOptions.customWallets = uniqueCustomWallets;\n    }\n  }\n\n  return appKitOptions;\n}\n\nexport function defineChain<\n  formatters extends ChainFormatters,\n  const chain extends CaipNetwork<formatters>,\n>(chain: chain): Prettify<Assign<CaipNetwork<undefined>, chain>> {\n  return {\n    formatters: undefined,\n    fees: undefined,\n    serializers: undefined,\n    ...chain,\n  } as Assign<CaipNetwork<undefined>, chain>;\n}\n"],"names":["chains","chainId","params","optionalChains","methods","optionalMethods","events","optionalEvents","rpcMap","isValidArray","required","REQUIRED_METHODS","REQUIRED_EVENTS","__spreadValues","eventsRequiringPermissions","event","methodsRequiringPermissions","shouldIncludeRequiredChains","optional","OPTIONAL_METHODS","OPTIONAL_EVENTS","EthereumProvider","__publicField","EventEmitter","STORAGE_KEY","listener","payload","opts","provider","args","expiry","callback","_a","session","resolve","reject","_b","state","scopedProperties","__spreadProps","error","accounts","getAccountsFromNamespaces","walletUniversalLink","result","chain","getSdkError","uri","chainIds","x","c","account","namespace","reference","address","requiredChains","allChains","requiredMethods","requiredEvents","qrModalOptions","projectId","map","UniversalProvider","appKit","createAppKit","getAppkit","convertWCMToAppKitOptions","options","e","RPC_URL","Provider","convertThemeVariables","wcmTheme","mapCaipIdToAppKitCaipNetwork","caipId","wcmConfig","_c","_d","_e","_f","_g","networks","defaultNetwork","network","appKitOptions","customWallets","wallet","allWallets","uniqueCustomWallets"],"mappings":"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"}