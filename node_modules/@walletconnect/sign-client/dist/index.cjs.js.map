{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n  extractSolanaTransactionId,\n  mergeRequiredAndOptionalNamespaces,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(async () => {\n        await this.processPendingMessageEvents();\n\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  private async processPendingMessageEvents() {\n    try {\n      const topics = this.client.session.keys;\n      const pendingMessages = this.client.core.relayer.messages.getWithoutAck(topics);\n      for (const [topic, messages] of Object.entries(pendingMessages)) {\n        for (const message of messages) {\n          try {\n            await this.onProviderMessageEvent({\n              topic,\n              message,\n              publishedAt: Date.now(),\n            });\n          } catch (error) {\n            this.client.logger.warn(\n              `Error processing pending message event for topic: ${topic}, message: ${message}`,\n            );\n          }\n        }\n      }\n    } catch (error) {\n      this.client.logger.warn(\"processPendingMessageEvents failed\", error);\n    }\n  }\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n\n    // requiredNamespaces are deprecated, assign them to optionalNamespaces\n    connectParams.optionalNamespaces = mergeRequiredAndOptionalNamespaces(\n      connectParams.requiredNamespaces,\n      connectParams.optionalNamespaces,\n    );\n\n    connectParams.requiredNamespaces = {};\n\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      id: payloadId(),\n    };\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n      clientRpcId: proposal.id,\n    });\n\n    await this.setProposal(proposal.id, proposal);\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, scopedProperties, sessionConfig } =\n      params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n    const shouldSetTVF = this.shouldSetTVF(protocolMethod, protocolRequestParams);\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          ...(shouldSetTVF && {\n            tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n          }),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        if (this.shouldSetTVF(request.method as JsonRpcTypes.WcMethod, request.params)) {\n          tvf = this.getTVFParams(id, request.params, result);\n        }\n      } catch (error) {\n        this.client.logger.warn(`sendResult() -> getTVFParams() failed`, error);\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      this.onProviderMessageEvent(event);\n    });\n  }\n\n  private onProviderMessageEvent = async (event: RelayerTypes.MessageEvent) => {\n    // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n    if (!this.initialized || this.relayMessageCache.length > 0) {\n      this.relayMessageCache.push(event);\n    } else {\n      await this.onRelayMessage(event);\n    }\n  };\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    try {\n      const payload = await this.client.core.crypto.decode(topic, message, {\n        receiverPublicKey: publicKey,\n        encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n      });\n\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        await this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        await this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n      await this.client.core.relayer.messages.ack(topic, message);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        scopedProperties,\n        sessionConfig,\n      } = payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(scopedProperties && { scopedProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 2176`);\n      }\n\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          ...proposal,\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n          scopedProperties: proposal.scopedProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      const warning =\n        \"requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces\";\n      // if logger level is one of the following, the logger.warn will not be shown, so we need to use console.warn\n      if ([\"fatal\", \"error\", \"silent\"].includes(this.client.logger.level)) {\n        console.warn(warning);\n      } else {\n        this.client.logger.warn(warning);\n      }\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const requestedNamespaces = Object.keys(requiredNamespaces || {}).concat(\n        Object.keys(optionalNamespaces || {}),\n      );\n\n      const scopedNamespaces = Object.keys(scopedProperties);\n      const valid = scopedNamespaces.every((ns) => requestedNamespaces.includes(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, required/optional namespaces: ${JSON.stringify(requestedNamespaces)}`,\n        );\n      }\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties, scopedProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const approvedNamespaces = new Set(Object.keys(namespaces));\n      const scopedNamespaces = Object.keys(scopedProperties);\n\n      // the approved scoped namespaces must be a subset of the approved namespaces\n      const valid = scopedNamespaces.every((ns) => approvedNamespaces.has(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, approved namespaces: ${Array.from(approvedNamespaces).join(\", \")}`,\n        );\n      }\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: SessionTypes.ScopedProperties, type: string) => {\n    Object.values(properties).forEach((property, index) => {\n      if (property === null || property === undefined) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must contain an existing value for each key. Received: ${property} for key ${\n            Object.keys(properties)[index]\n          }`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private shouldSetTVF = (\n    protocolMethod: JsonRpcTypes.WcMethod,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n  ) => {\n    if (!params) return false;\n    if (protocolMethod !== \"wc_sessionRequest\") return false;\n    const { request } = params;\n    return Object.keys(TVF_METHODS).includes(request.method);\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    try {\n      const requestMethod = params.request.method;\n      const txHashes = this.extractTxHashesFromResult(requestMethod, result);\n      const tvf: RelayerTypes.ITVF = {\n        correlationId: id,\n        rpcMethods: [requestMethod],\n        chainId: params.chainId,\n        ...(this.isValidContractData(params.request.params) && {\n          // initially only get contractAddresses from EVM txs\n          contractAddresses: [params.request.params?.[0]?.to],\n        }),\n        txHashes,\n      };\n      return tvf;\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return {};\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (method: string, result: any): string[] => {\n    try {\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes: string[] = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        if (method === \"solana_signAllTransactions\") {\n          return hashes.map((hash) => extractSolanaTransactionId(hash));\n        }\n\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { populateAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = populateAppMetadata(opts?.metadata);\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","mergeRequiredAndOptionalNamespaces","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","scopedProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","shouldSetTVF","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","warning","requestedNamespaces","ns","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","approvedNamespaces","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","index","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","TVF_METHODS","txHashes","data","hexPart","methodConfig","hashes","isValidArray","extractSolanaTransactionId","topics","pendingMessages","messages","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","populateAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}