import * as Key from '../../viem/Key.js';
import * as Permissions from './schema/permissions.js';
export const Schema = Permissions.Request;
export function fromKey(key) {
    const { expiry, feeToken, permissions, publicKey, type } = key;
    return {
        expiry,
        feeToken: feeToken ?? null,
        key: {
            publicKey,
            type,
        },
        permissions: (permissions ?? {}),
    };
}
export async function toKey(request, options = {}) {
    if (!request)
        return undefined;
    const chainId = options.chainId ?? request.chainId;
    const expiry = request.expiry ?? 0;
    const type = request.key?.type ?? 'secp256k1';
    const feeToken = request.feeToken;
    const permissions = Key.resolvePermissions(request, {
        feeTokens: options.feeTokens,
    });
    const publicKey = request?.key?.publicKey ?? '0x';
    const key = Key.from({
        chainId,
        expiry,
        feeToken,
        permissions,
        publicKey,
        role: 'session',
        type,
    });
    if (request?.key)
        return key;
    return await Key.createWebCryptoP256({
        ...key,
        role: 'session',
    });
}
//# sourceMappingURL=permissionsRequest.js.map