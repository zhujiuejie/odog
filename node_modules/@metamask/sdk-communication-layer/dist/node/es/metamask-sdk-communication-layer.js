import{__awaiter as e}from"tslib";import t from"cross-fetch";import n from"debug";import{Buffer}from"buffer";import{PrivateKey as i,encrypt as o,decrypt as a}from"eciesjs";import{analytics as c}from"@metamask/sdk-analytics";import{EventEmitter2 as s}from"eventemitter2";import{validate as r,v4 as l}from"uuid";import{io as d}from"socket.io-client";const u=n("KeyExchange:Layer"),h=n("SocketService:Layer"),m=n("Ecies:Layer"),E=n("RemoteCommunication:Layer");u.color="##95c44e",h.color="#f638d7",m.color="#465b9c",E.color="#47a2be";const g={KeyExchange:u,SocketService:h,Ecies:m,RemoteCommunication:E};let v,y=[],S=[];const C=(n,i)=>e(void 0,void 0,void 0,(function*(){v=i,S.push(n),function(n){return e(this,void 0,void 0,(function*(){if(!v||!n)return;!function(){const e=S;S=y,y=e}();const e=v.endsWith("/")?`${v}evt`:`${v}/evt`,i=Object.assign({},n);if(delete i.params,n.params)for(const[e,t]of Object.entries(n.params))i[e]=t;const o=JSON.stringify(i);g.RemoteCommunication(`[sendBufferedEvents] Sending ${y.length} analytics events to ${e}`);try{const n=yield t(e,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:o}),i=yield n.text();g.RemoteCommunication(`[sendBufferedEvents] Response: ${i}`),y.length=0}catch(e){}}))}(n).catch((()=>{}))}));class p{constructor(e){this.enabled=!0,(null==e?void 0:e.debug)&&n.enable("Ecies:Layer"),this.ecies=(null==e?void 0:e.privateKey)?i.fromHex(e.privateKey):new i,g.Ecies("[ECIES constructor()] initialized secret: ",this.ecies.toHex()),g.Ecies("[ECIES constructor()] initialized public: ",this.ecies.publicKey.toHex()),g.Ecies("[ECIES constructor()] init with",this)}generateECIES(){this.ecies=new i}getPublicKey(){return this.ecies.publicKey.toHex()}encrypt(e,t){let n=e;if(this.enabled)try{g.Ecies("[ECIES: encrypt()] using otherPublicKey",t);const i=Buffer.from(e),a=o(t,i);n=Buffer.from(a).toString("base64")}catch(n){throw g.Ecies("[ECIES: encrypt()] error encrypt:",n),g.Ecies("[ECIES: encrypt()] private: ",this.ecies.toHex()),g.Ecies("[ECIES: encrypt()] data: ",e),g.Ecies("[ECIES: encrypt()] otherkey: ",t),n}return n}decrypt(e){let t=e;if(this.enabled)try{g.Ecies("[ECIES: decrypt()] using privateKey",this.ecies.toHex());const n=Buffer.from(e.toString(),"base64");t=a(this.ecies.toHex(),n).toString()}catch(t){throw g.Ecies("[ECIES: decrypt()] error decrypt",t),g.Ecies("[ECIES: decrypt()] private: ",this.ecies.toHex()),g.Ecies("[ECIES: decrypt()] encryptedData: ",e),t}return t}getKeyInfo(){return{private:this.ecies.toHex(),public:this.ecies.publicKey.toHex()}}toString(){g.Ecies("[ECIES: toString()]",this.getKeyInfo())}}var f={name:"@metamask/sdk-communication-layer",version:"0.33.1",description:"",homepage:"https://github.com/MetaMask/metamask-sdk#readme",bugs:{url:"https://github.com/MetaMask/metamask-sdk/issues"},repository:{type:"git",url:"https://github.com/MetaMask/metamask-sdk.git",directory:"packages/sdk-communication-layer"},main:"dist/node/cjs/metamask-sdk-communication-layer.js",unpkg:"dist/browser/umd/metamask-sdk-communication-layer.js",module:"dist/node/es/metamask-sdk-communication-layer.js",browser:"dist/browser/es/metamask-sdk-communication-layer.js","react-native":"dist/react-native/es/metamask-sdk-communication-layer.js",types:"dist/types/src/index.d.ts",files:["/dist"],scripts:{"build:types":"tsc --project tsconfig.build.json --emitDeclarationOnly --outDir dist/types","build:clean":"yarn clean && yarn build",build:"yarn build:types && rollup -c --bundleConfigAsCjs","build:dev":"yarn build:types && NODE_ENV=dev rollup -c --bundleConfigAsCjs",dev:'concurrently "tsc --watch" "rollup -c --bundleConfigAsCjs -w"',"build:post-tsc":"echo 'N/A'","build:pre-tsc":"echo 'N/A'",size:"size-limit",clean:"rimraf ./dist",lint:"yarn lint:eslint && yarn lint:misc --check","lint:changelog":"../../scripts/validate-changelog.sh @metamask/sdk-communication-layer","lint:eslint":"eslint . --cache --ext js,ts","lint:fix":"yarn lint:eslint --fix && yarn lint:misc --write","lint:misc":"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore","publish:preview":"yarn npm publish --tag preview",prepack:"../../scripts/prepack.sh",reset:"yarn clean && rimraf ./node_modules/",test:'jest --testPathIgnorePatterns "/e2e/"',"test:e2e":'jest --testPathPattern "/e2e/"',"test:coverage":"jest --coverage","test:ci":'jest --coverage --passWithNoTests --setupFilesAfterEnv ./jest-preload.js --testPathIgnorePatterns "/e2e/"',"test:dev":"jest",watch:"rollup -c --bundleConfigAsCjs -w"},dependencies:{"@metamask/sdk-analytics":"workspace:*",bufferutil:"^4.0.8","date-fns":"^2.29.3",debug:"4.3.4","utf-8-validate":"^5.0.2",uuid:"^8.3.2"},devDependencies:{"@jest/globals":"^29.3.1","@lavamoat/allow-scripts":"^2.3.1","@metamask/auto-changelog":"3.1.0","@metamask/eslint-config":"^6.0.0","@metamask/eslint-config-nodejs":"^6.0.0","@metamask/eslint-config-typescript":"^6.0.0","@rollup/plugin-commonjs":"^25.0.0","@rollup/plugin-json":"^6.0.0","@rollup/plugin-node-resolve":"^15.0.2","@rollup/plugin-replace":"^6.0.1","@rollup/plugin-terser":"^0.4.4","@size-limit/preset-big-lib":"^11.0.2","@types/jest":"^29.2.4","@types/node":"^20.1.3","@types/uuid":"^9.0.0","@typescript-eslint/eslint-plugin":"^4.26.0","@typescript-eslint/parser":"^4.26.0",concurrently:"^9.1.2","cross-fetch":"^4.0.0",eciesjs:"^0.4.11",eslint:"^7.30.0","eslint-config-prettier":"^8.3.0","eslint-plugin-import":"^2.23.4","eslint-plugin-jest":"^24.4.0","eslint-plugin-jsdoc":"^36.1.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^3.4.0",eventemitter2:"^6.4.9",jest:"^29.3.1",prettier:"^2.3.0",rimraf:"^3.0.2",rollup:"^4.26.0","rollup-plugin-jscc":"^2.0.0","rollup-plugin-natives":"^0.7.5","rollup-plugin-node-builtins":"^2.1.2","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-peer-deps-external":"^2.2.4","rollup-plugin-polyfill-node":"^0.13.0","rollup-plugin-sizes":"^1.0.6","rollup-plugin-typescript2":"^0.31.2","rollup-plugin-visualizer":"^5.12.0","size-limit":"^11.1.6","socket.io-client":"^4.5.1","stream-browserify":"^3.0.0","ts-jest":"^29.0.3","ts-node":"^10.9.1",typescript:"^5.6.3"},peerDependencies:{"cross-fetch":"^4.0.0",eciesjs:"*",eventemitter2:"^6.4.9","readable-stream":"^3.6.2","socket.io-client":"^4.5.1"},publishConfig:{access:"public",registry:"https://registry.npmjs.org/"},lavamoat:{allowScripts:{"@lavamoat/preinstall-always-fail":!1,canvas:!0,"eciesjs>secp256k1":!1,"socket.io-client>engine.io-client>ws>bufferutil":!1,"socket.io-client>engine.io-client>ws>utf-8-validate":!1,bufferutil:!1,"utf-8-validate":!1}}};const k="https://metamask-sdk.api.cx.metamask.io/",_=["websocket"],I=6048e5,K=3e3,x={METAMASK_GETPROVIDERSTATE:"metamask_getProviderState",METAMASK_CONNECTSIGN:"metamask_connectSign",METAMASK_CONNECTWITH:"metamask_connectWith",METAMASK_OPEN:"metamask_open",METAMASK_BATCH:"metamask_batch",PERSONAL_SIGN:"personal_sign",WALLET_REQUESTPERMISSIONS:"wallet_requestPermissions",WALLET_REVOKEPERMISSIONS:"wallet_revokePermissions",WALLET_GETPERMISSIONS:"wallet_getPermissions",WALLET_WATCHASSET:"wallet_watchAsset",WALLET_SWITCHETHEREUMCHAIN:"wallet_switchEthereumChain",WALLET_ADDETHEREUMCHAIN:"wallet_addEthereumChain",ETH_REQUESTACCOUNTS:"eth_requestAccounts",ETH_ACCOUNTS:"eth_accounts",ETH_CHAINID:"eth_chainId",ETH_SENDTRANSACTION:"eth_sendTransaction",ETH_SIGNTYPEDDATA:"eth_signTypedData",ETH_SIGNTYPEDDATA_V3:"eth_signTypedData_v3",ETH_SIGNTYPEDDATA_V4:"eth_signTypedData_v4",ETH_SIGNTRANSACTION:"eth_signTransaction",ETH_SIGN:"eth_sign",PERSONAL_EC_RECOVER:"personal_ecRecover"},A=[x.METAMASK_CONNECTSIGN,x.METAMASK_CONNECTWITH,x.METAMASK_OPEN,x.METAMASK_BATCH,x.PERSONAL_SIGN,x.WALLET_REQUESTPERMISSIONS,x.WALLET_REVOKEPERMISSIONS,x.WALLET_WATCHASSET,x.ETH_SENDTRANSACTION,x.ETH_SIGNTYPEDDATA,x.ETH_SIGNTYPEDDATA_V3,x.ETH_SIGNTYPEDDATA_V4,x.ETH_SIGNTRANSACTION,x.ETH_SIGN,x.PERSONAL_EC_RECOVER];function N(e){return A.includes(e)}function T(e){const{context:t}=e;g.RemoteCommunication(`[RemoteCommunication: clean()] context=${t}`),e.channelConfig=void 0,e.ready=!1,e.originatorConnectStarted=!1}var O,R,D,P,b,L;!function(e){e.DISCONNECTED="disconnected",e.WAITING="waiting",e.TIMEOUT="timeout",e.LINKED="linked",e.PAUSED="paused",e.TERMINATED="terminated"}(O||(O={})),function(e){e.KEY_INFO="key_info",e.SERVICE_STATUS="service_status",e.PROVIDER_UPDATE="provider_update",e.RPC_UPDATE="rpc_update",e.KEYS_EXCHANGED="keys_exchanged",e.JOIN_CHANNEL="join_channel",e.PUBLIC_KEY="public_key",e.CHANNEL_CREATED="channel_created",e.CLIENTS_CONNECTED="clients_connected",e.CLIENTS_DISCONNECTED="clients_disconnected",e.CLIENTS_WAITING="clients_waiting",e.CLIENTS_READY="clients_ready",e.REJECTED="rejected",e.WALLET_INIT="wallet_init",e.CHANNEL_PERSISTENCE="channel_persistence",e.CONFIG="config",e.MESSAGE_ACK="ack",e.SOCKET_DISCONNECTED="socket_disconnected",e.SOCKET_RECONNECT="socket_reconnect",e.OTP="otp",e.SDK_RPC_CALL="sdk_rpc_call",e.AUTHORIZED="authorized",e.CONNECTION_STATUS="connection_status",e.MESSAGE="message",e.TERMINATE="terminate"}(R||(R={})),function(e){e.KEY_EXCHANGE="key_exchange"}(D||(D={})),function(e){e.KEY_HANDSHAKE_START="key_handshake_start",e.KEY_HANDSHAKE_CHECK="key_handshake_check",e.KEY_HANDSHAKE_SYN="key_handshake_SYN",e.KEY_HANDSHAKE_SYNACK="key_handshake_SYNACK",e.KEY_HANDSHAKE_ACK="key_handshake_ACK",e.KEY_HANDSHAKE_WALLET="key_handshake_wallet",e.KEY_HANDSHAKE_NONE="none"}(P||(P={}));class $ extends s{constructor({communicationLayer:e,otherPublicKey:t,context:n,ecies:i,logging:o}){super(),this.keysExchanged=!1,this.step=P.KEY_HANDSHAKE_NONE,this.debug=!1,this.context=n,this.communicationLayer=e,(null==i?void 0:i.privateKey)&&t&&(g.KeyExchange(`[KeyExchange: constructor()] otherPubKey=${t} set keysExchanged to true!`,i),this.keysExchanged=!0),this.myECIES=new p(Object.assign(Object.assign({},i),{debug:null==o?void 0:o.eciesLayer})),this.communicationLayer.state.eciesInstance=this.myECIES,this.myPublicKey=this.myECIES.getPublicKey(),this.debug=!0===(null==o?void 0:o.keyExchangeLayer),t&&this.setOtherPublicKey(t),this.communicationLayer.on(D.KEY_EXCHANGE,this.onKeyExchangeMessage.bind(this))}onKeyExchangeMessage(e){const{relayPersistence:t}=this.communicationLayer.remote.state;if(g.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} keysExchanged=${this.keysExchanged} relayPersistence=${t}`,e),t)return void g.KeyExchange("[KeyExchange: onKeyExchangeMessage()] Ignoring key exchange message because relay persistence is activated");const{message:n}=e;this.keysExchanged&&g.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} received handshake while already exchanged. step=${this.step} otherPubKey=${this.otherPublicKey}`),this.emit(R.KEY_INFO,n.type),n.type===P.KEY_HANDSHAKE_SYN?(this.checkStep([P.KEY_HANDSHAKE_NONE,P.KEY_HANDSHAKE_ACK]),g.KeyExchange("[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYN",n),n.pubkey&&this.setOtherPublicKey(n.pubkey),this.communicationLayer.sendMessage({type:P.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey}).catch((e=>{g.KeyExchange("[KeyExchange: onKeyExchangeMessage()] Error sending KEY_HANDSHAKE_SYNACK",e)})),this.setStep(P.KEY_HANDSHAKE_ACK)):n.type===P.KEY_HANDSHAKE_SYNACK?(this.checkStep([P.KEY_HANDSHAKE_SYNACK,P.KEY_HANDSHAKE_ACK,P.KEY_HANDSHAKE_NONE]),g.KeyExchange("[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYNACK"),n.pubkey&&this.setOtherPublicKey(n.pubkey),this.communicationLayer.sendMessage({type:P.KEY_HANDSHAKE_ACK}).catch((e=>{g.KeyExchange("[KeyExchange: onKeyExchangeMessage()] Error sending KEY_HANDSHAKE_ACK",e)})),this.keysExchanged=!0,this.setStep(P.KEY_HANDSHAKE_ACK),this.emit(R.KEYS_EXCHANGED)):n.type===P.KEY_HANDSHAKE_ACK&&(g.KeyExchange("[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_ACK set keysExchanged to true!"),this.checkStep([P.KEY_HANDSHAKE_ACK,P.KEY_HANDSHAKE_NONE]),this.keysExchanged=!0,this.setStep(P.KEY_HANDSHAKE_ACK),this.emit(R.KEYS_EXCHANGED))}resetKeys(e){this.clean(),this.myECIES=new p(e)}clean(){g.KeyExchange(`[KeyExchange: clean()] context=${this.context} reset handshake state`),this.setStep(P.KEY_HANDSHAKE_NONE),this.emit(R.KEY_INFO,this.step),this.keysExchanged=!1}start({isOriginator:e,force:t}){const{relayPersistence:n,protocolVersion:i}=this.communicationLayer.remote.state,o=i>=2;n?g.KeyExchange("[KeyExchange: start()] Ignoring key exchange message because relay persistence is activated"):(g.KeyExchange(`[KeyExchange: start()] context=${this.context} protocolVersion=${i} isOriginator=${e} step=${this.step} force=${t} relayPersistence=${n} keysExchanged=${this.keysExchanged}`),e?!(this.keysExchanged||this.step!==P.KEY_HANDSHAKE_NONE&&this.step!==P.KEY_HANDSHAKE_SYNACK)||t?(g.KeyExchange(`[KeyExchange: start()] context=${this.context} -- start key exchange (force=${t}) -- step=${this.step}`,this.step),this.clean(),this.setStep(P.KEY_HANDSHAKE_SYNACK),this.communicationLayer.sendMessage({type:P.KEY_HANDSHAKE_SYN,pubkey:this.myPublicKey,v:2}).catch((e=>{g.KeyExchange("[KeyExchange: start()] Error sending KEY_HANDSHAKE_SYN",e)}))):g.KeyExchange(`[KeyExchange: start()] context=${this.context} -- key exchange already ${this.keysExchanged?"done":"in progress"} -- aborted.`,this.step):this.keysExchanged&&!0!==t?g.KeyExchange("[KeyExchange: start()] don't send KEY_HANDSHAKE_START -- exchange already done."):o?this.communicationLayer.sendMessage({type:P.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey,v:2}).catch((e=>{g.KeyExchange("[KeyExchange: start()] Error sending KEY_HANDSHAKE_SYNACK",e)})):(this.communicationLayer.sendMessage({type:P.KEY_HANDSHAKE_START}).catch((e=>{g.KeyExchange("[KeyExchange: start()] Error sending KEY_HANDSHAKE_START",e)})),this.clean()))}setStep(e){this.step=e,this.emit(R.KEY_INFO,e)}checkStep(e){e.length>0&&e.indexOf(this.step.toString())}setRelayPersistence({localKey:e,otherKey:t}){this.otherPublicKey=t,this.myECIES=new p({privateKey:e,debug:this.debug}),this.keysExchanged=!0}setKeysExchanged(e){this.keysExchanged=e}areKeysExchanged(){return this.keysExchanged}getMyPublicKey(){return this.myPublicKey}getOtherPublicKey(){return this.otherPublicKey}setOtherPublicKey(e){g.KeyExchange("[KeyExchange: setOtherPubKey()]",e),this.otherPublicKey=e}encryptMessage(e){if(!this.otherPublicKey)throw new Error("encryptMessage: Keys not exchanged - missing otherPubKey");return this.myECIES.encrypt(e,this.otherPublicKey)}decryptMessage(e){if(!this.otherPublicKey)throw new Error("decryptMessage: Keys not exchanged - missing otherPubKey");return this.myECIES.decrypt(e)}getKeyInfo(){return{ecies:Object.assign(Object.assign({},this.myECIES.getKeyInfo()),{otherPubKey:this.otherPublicKey}),step:this.step,keysExchanged:this.areKeysExchanged()}}toString(){const e={keyInfo:this.getKeyInfo(),keysExchanged:this.keysExchanged,step:this.step};return JSON.stringify(e)}}!function(e){e.TERMINATE="terminate",e.ANSWER="answer",e.OFFER="offer",e.CANDIDATE="candidate",e.JSONRPC="jsonrpc",e.WALLET_INFO="wallet_info",e.WALLET_INIT="wallet_init",e.ORIGINATOR_INFO="originator_info",e.PAUSE="pause",e.OTP="otp",e.AUTHORIZED="authorized",e.PING="ping",e.READY="ready"}(b||(b={})),function(e){e.REQUEST="sdk_connect_request_started",e.REQUEST_MOBILE="sdk_connect_request_started_mobile",e.RECONNECT="sdk_reconnect_request_started",e.CONNECTED="sdk_connection_established",e.CONNECTED_MOBILE="sdk_connection_established_mobile",e.AUTHORIZED="sdk_connection_authorized",e.REJECTED="sdk_connection_rejected",e.TERMINATED="sdk_connection_terminated",e.DISCONNECTED="sdk_disconnected",e.SDK_USE_EXTENSION="sdk_use_extension",e.SDK_RPC_REQUEST="sdk_rpc_request",e.SDK_RPC_REQUEST_RECEIVED="sdk_rpc_request_received",e.SDK_RPC_REQUEST_DONE="sdk_rpc_request_done",e.SDK_EXTENSION_UTILIZED="sdk_extension_utilized",e.SDK_USE_INAPP_BROWSER="sdk_use_inapp_browser"}(L||(L={}));const w=(t,n,i)=>e(void 0,void 0,void 0,(function*(){var e,o,a,c,s,r;const{remote:l,state:d}=t,{channelId:u,isOriginator:h}=d;if("error_terminated"===n)return g.SocketService(`handleJoinChannelResults: Channel ${u} terminated`),void t.emit(R.TERMINATE);if(!i)return void g.SocketService(`handleJoinChannelResults: No result for channel ${u}`);const{persistence:m,walletKey:E,rejected:v}=i;if(g.SocketService(`handleJoinChannelResults: Channel ${u} persistence=${m} walletKey=${E} rejected=${v}`),v)return g.SocketService(`handleJoinChannelResults: Channel ${u} rejected`),yield t.remote.disconnect({terminate:!0}),t.remote.emit(R.REJECTED,{channelId:u}),void t.remote.emitServiceStatusEvent();if(E&&!(null===(e=l.state.channelConfig)||void 0===e?void 0:e.otherKey)){t.getKeyExchange().setOtherPublicKey(E),null===(o=t.state.keyExchange)||void 0===o||o.setKeysExchanged(!0),l.state.ready=!0,l.state.authorized=!0,l.emit(R.AUTHORIZED);const{communicationLayer:e,storageManager:n}=l.state,i=Object.assign(Object.assign({},l.state.channelConfig),{channelId:null!==(a=l.state.channelId)&&void 0!==a?a:"",validUntil:Date.now()+I,localKey:null==e?void 0:e.getKeyInfo().ecies.private,otherKey:E});t.sendMessage({type:P.KEY_HANDSHAKE_ACK}).catch((e=>{})),null===(c=t.state.socket)||void 0===c||c.emit(b.PING,{id:u,clientType:h?"dapp":"wallet",context:"on_channel_reconnect",message:""}),yield null==n?void 0:n.persistChannelConfig(i),l.emitServiceStatusEvent(),l.setConnectionStatus(O.LINKED)}m&&(t.emit(R.CHANNEL_PERSISTENCE),null===(s=t.state.keyExchange)||void 0===s||s.setKeysExchanged(!0),l.state.ready=!0,l.state.authorized=!0,l.emit(R.AUTHORIZED),C(Object.assign(Object.assign({id:null!=u?u:"",event:h?L.CONNECTED:L.CONNECTED_MOBILE},t.remote.state.originatorInfo),{sdkVersion:t.remote.state.sdkVersion,commLayer:t.state.communicationLayerPreference,commLayerVersion:f.version,walletVersion:null===(r=t.remote.state.walletInfo)||void 0===r?void 0:r.version}),d.communicationServerUrl).catch((e=>{})))})),M=e=>new Promise((t=>{setTimeout(t,e)})),H=(t,n,...i)=>e(void 0,[t,n,...i],void 0,(function*(e,t,n=200){let i;const o=Date.now();let a=!1;for(;!a;){if(a=Date.now()-o>3e5,i=t[e],void 0!==i.elapsedTime)return i;yield M(n)}throw new Error(`RPC ${e} timed out`)})),j=t=>e(void 0,void 0,void 0,(function*(){const{state:n}=t,{socket:i,channelId:o,context:a,isOriginator:c,isReconnecting:s}=n;if(s)return g.SocketService("[SocketService: reconnectSocket()] Reconnection already in progress, skipping",t),!1;if(!i)return g.SocketService("[SocketService: reconnectSocket()] socket is not defined",t),!1;if(!o)return!1;const{connected:r}=i;n.isReconnecting=!0,n.reconnectionAttempts=0,g.SocketService(`[SocketService: reconnectSocket()] connected=${r} trying to reconnect after socketio disconnection`,t);try{for(;3>n.reconnectionAttempts;){if(g.SocketService(`[SocketService: reconnectSocket()] Attempt ${n.reconnectionAttempts+1} of 3`,t),yield M(200),i.connected)return g.SocketService("Socket already connected --- ping to retrieve messages"),i.emit(b.PING,{id:o,clientType:c?"dapp":"wallet",context:"on_channel_config",message:""}),!0;n.resumed=!0,i.connect(),t.emit(R.SOCKET_RECONNECT);try{if(yield new Promise(((n,s)=>{i.emit(R.JOIN_CHANNEL,{channelId:o,context:`${a}connect_again`,clientType:c?"dapp":"wallet"},((i,o)=>e(void 0,void 0,void 0,(function*(){try{yield w(t,i,o),n()}catch(e){s(e)}}))))})),yield M(100),i.connected)return g.SocketService(`Reconnection successful on attempt ${n.reconnectionAttempts+1}`),!0}catch(e){g.SocketService(`Error during reconnection attempt ${n.reconnectionAttempts+1}:`,e)}n.reconnectionAttempts+=1,3>n.reconnectionAttempts&&(yield M(200))}return g.SocketService("Failed to reconnect after 3 attempts"),!1}finally{n.isReconnecting=!1,n.reconnectionAttempts=0}}));function Y(t,n){return e(this,void 0,void 0,(function*(){var e;const i=null===(e=t.state.keyExchange)||void 0===e?void 0:e.encryptMessage(JSON.stringify(n)),o={id:t.state.channelId,context:t.state.context,clientType:t.state.isOriginator?"dapp":"wallet",message:i,plaintext:t.state.hasPlaintext?JSON.stringify(n):void 0};return g.SocketService(`[SocketService: encryptAndSendMessage()] context=${t.state.context}`,o),n.type===b.TERMINATE&&(t.state.manualDisconnect=!0),new Promise(((e,n)=>{var i;null===(i=t.state.socket)||void 0===i||i.emit(R.MESSAGE,o,((t,i)=>{var o;t&&(g.SocketService(`[SocketService: encryptAndSendMessage()] error=${t}`),n(t)),g.SocketService("[encryptAndSendMessage] response",i),e(null!==(o=null==i?void 0:i.success)&&void 0!==o&&o)}))}))}))}var U;!function(e){e.RPC_CHECK="rpcCheck",e.SKIPPED_RPC="skippedRpc"}(U||(U={}));const G=["eth_sendTransaction","eth_signTypedData","eth_signTransaction","personal_sign","wallet_requestPermissions","wallet_switchEthereumChain","eth_signTypedData_v3","eth_signTypedData_v4","metamask_connectSign","metamask_connectWith","metamask_batch"].map((e=>e.toLowerCase()));function V(t,n){return e(this,void 0,void 0,(function*(){var i,o,a;if(!t.state.channelId)throw g.SocketService("handleSendMessage: no channelId - Create a channel first"),new Error("Create a channel first");if(g.SocketService(`[SocketService: handleSendMessage()] context=${t.state.context} areKeysExchanged=${null===(i=t.state.keyExchange)||void 0===i?void 0:i.areKeysExchanged()}`,n),null===(o=null==n?void 0:n.type)||void 0===o?void 0:o.startsWith("key_handshake"))return function(e,t){var n;g.SocketService(`[SocketService: handleKeyHandshake()] context=${e.state.context}`,t),null===(n=e.state.socket)||void 0===n||n.emit(R.MESSAGE,{id:e.state.channelId,context:e.state.context,clientType:e.state.isOriginator?"dapp":"wallet",message:t})}(t,n),!0;!function(e,t){var n;if(!(null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged())&&!e.remote.state.relayPersistence)throw g.SocketService(`[SocketService: validateKeyExchange()] context=${e.state.context} ERROR keys not exchanged`,t),new Error("Keys not exchanged BBB")}(t,n),function(e,t){var n;const i=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:"",o=null==t?void 0:t.id;e.state.isOriginator&&o&&(e.state.rpcMethodTracker[o]={id:o,timestamp:Date.now(),method:i},e.emit(R.RPC_UPDATE,e.state.rpcMethodTracker[o]))}(t,n);const s=yield Y(t,n);return t.remote.state.analytics&&t.remote.state.isOriginator&&n.method&&G.includes(n.method.toLowerCase())&&C({id:null!==(a=t.remote.state.channelId)&&void 0!==a?a:"",event:L.SDK_RPC_REQUEST,params:{method:n.method,from:"mobile"}},t.remote.state.communicationServerUrl).catch((e=>{})),t.remote.state.isOriginator&&n.method&&N(n.method)&&c.track("sdk_action_requested",{action:n.method}),function(t,n){return e(this,void 0,void 0,(function*(){var i;const o=null==n?void 0:n.id,a=null!==(i=null==n?void 0:n.method)&&void 0!==i?i:"";if(t.state.isOriginator&&o)try{const i=H(o,t.state.rpcMethodTracker,200).then((e=>({type:U.RPC_CHECK,result:e}))),c=(()=>e(this,void 0,void 0,(function*(){const n=yield(t=>e(void 0,[t],void 0,(function*({rpcId:e,instance:t}){for(;t.state.lastRpcId===e||void 0===t.state.lastRpcId;)yield M(200);return t.state.lastRpcId})))({instance:t,rpcId:o}),i=yield H(n,t.state.rpcMethodTracker,200);return{type:U.SKIPPED_RPC,result:i}})))(),s=yield Promise.race([i,c]);if(s.type===U.RPC_CHECK){const e=s.result;g.SocketService(`[SocketService:handleRpcReplies()] id=${n.id} ${a} ( ${e.elapsedTime} ms)`,e.result)}else{if(s.type!==U.SKIPPED_RPC)throw new Error(`Error handling RPC replies for ${o}`);{const e=Object.assign(Object.assign({},t.state.rpcMethodTracker[o]),{error:new Error("SDK_CONNECTION_ISSUE")});t.emit(R.RPC_UPDATE,e);const n={data:Object.assign(Object.assign({},e),{jsonrpc:"2.0"}),name:"metamask-provider"};t.emit(R.MESSAGE,{message:n})}}}catch(e){throw e}}))}(t,n).catch((e=>{})),s}))}const z=[{event:R.CLIENTS_CONNECTED,handler:function(t,n){return i=>e(this,void 0,void 0,(function*(){var e,i,o,a,c,s,r,l,d,u,h;const m=null!==(i=null===(e=t.remote.state.channelConfig)||void 0===e?void 0:e.relayPersistence)&&void 0!==i&&i;if(g.SocketService(`[SocketService: handleClientsConnected()] context=${t.state.context} on 'clients_connected-${n}' relayPersistence=${m} resumed=${t.state.resumed}  clientsPaused=${t.state.clientsPaused} keysExchanged=${null===(o=t.state.keyExchange)||void 0===o?void 0:o.areKeysExchanged()} isOriginator=${t.state.isOriginator}`),t.emit(R.CLIENTS_CONNECTED,{isOriginator:t.state.isOriginator,keysExchanged:null===(a=t.state.keyExchange)||void 0===a?void 0:a.areKeysExchanged(),context:t.state.context}),t.state.resumed)t.state.isOriginator||(g.SocketService(`[SocketService: handleClientsConnected()] context=${t.state.context} 'clients_connected' / keysExchanged=${null===(c=t.state.keyExchange)||void 0===c?void 0:c.areKeysExchanged()} -- backward compatibility`),null===(s=t.state.keyExchange)||void 0===s||s.start({isOriginator:null!==(r=t.state.isOriginator)&&void 0!==r&&r})),t.state.resumed=!1;else if(t.state.clientsPaused)g.SocketService("[SocketService: handleClientsConnected()] 'clients_connected' skip sending originatorInfo on pause");else if(!t.state.isOriginator){const e=!m;g.SocketService(`[SocketService: handleClientsConnected()] context=${t.state.context} on 'clients_connected' / keysExchanged=${null===(l=t.state.keyExchange)||void 0===l?void 0:l.areKeysExchanged()} -- force=${e} -- backward compatibility`),g.SocketService(`[SocketService: handleClientsConnected()] context=${t.state.context} on 'clients_connected' / keysExchanged=${null===(d=t.state.keyExchange)||void 0===d?void 0:d.areKeysExchanged()} -- force=${e} -- backward compatibility`),null===(u=t.state.keyExchange)||void 0===u||u.start({isOriginator:null!==(h=t.state.isOriginator)&&void 0!==h&&h,force:e})}t.state.clientsConnected=!0,t.state.clientsPaused=!1}))}},{event:R.CHANNEL_CREATED,handler:function(e,t){return n=>{g.SocketService(`[SocketService: handleChannelCreated()] context=${e.state.context} on 'channel_created-${t}'`,n),e.emit(R.CHANNEL_CREATED,n)}}},{event:R.CLIENTS_DISCONNECTED,handler:function(e,t){return()=>{var n;e.state.clientsConnected=!1,g.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}'`),e.remote.state.relayPersistence?g.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}' - relayPersistence enabled, skipping key exchange cleanup.`):(e.state.isOriginator&&!e.state.clientsPaused&&(null===(n=e.state.keyExchange)||void 0===n||n.clean()),e.emit(R.CLIENTS_DISCONNECTED,t))}}},{event:R.CONFIG,handler:function(t,n){return i=>e(this,void 0,void 0,(function*(){var e,o,a;g.SocketService(`[SocketService: handleChannelConfig()] update relayPersistence on 'config-${n}'`,i);const{persistence:c,walletKey:s}=i;t.state.isOriginator&&t.remote.state.channelConfig?(i.walletKey&&!t.remote.state.channelConfig.otherKey&&(g.SocketService(`Setting wallet key ${s}`),t.remote.state.channelConfig.otherKey=s,t.getKeyExchange().setOtherPublicKey(i.walletKey),null===(e=t.state.keyExchange)||void 0===e||e.setKeysExchanged(!0),yield t.remote.sendMessage({type:P.KEY_HANDSHAKE_ACK}),yield t.remote.sendMessage({type:b.PING}),yield null===(o=t.remote.state.storageManager)||void 0===o?void 0:o.persistChannelConfig(t.remote.state.channelConfig)),!0!==c||t.remote.state.channelConfig.relayPersistence||(g.SocketService(`Setting relay persistence ${c}`),t.remote.state.channelConfig.relayPersistence=c,t.remote.state.relayPersistence=!0,t.remote.emit(R.CHANNEL_PERSISTENCE),t.remote.state.authorized=!0,t.remote.state.ready=!0,t.remote.emit(R.AUTHORIZED),yield null===(a=t.remote.state.storageManager)||void 0===a?void 0:a.persistChannelConfig(t.remote.state.channelConfig))):t.state.isOriginator||i.persistence&&(t.remote.state.relayPersistence=!0,t.remote.emit(R.CHANNEL_PERSISTENCE))}))}},{event:R.MESSAGE,handler:function(e,t){return n=>{var i,o,a,s,r,l,d,u,h,m,E,v,y,S,p,k,_,I;const{ackId:K,message:x,error:A}=n,T=null!==(i=e.remote.state.relayPersistence)&&void 0!==i&&i;if(g.SocketService(`[SocketService handleMessage()]  relayPersistence=${T}  context=${e.state.context} on 'message' ${t} keysExchanged=${null===(o=e.state.keyExchange)||void 0===o?void 0:o.areKeysExchanged()}`,n),A)throw g.SocketService(`\n      [SocketService handleMessage()] context=${e.state.context}::on 'message' error=${A}`),new Error(A);const O="string"==typeof x;if(!O&&(null==x?void 0:x.type)===P.KEY_HANDSHAKE_START){if(T)return;return g.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received HANDSHAKE_START isOriginator=${e.state.isOriginator}`,x),void(null===(a=e.state.keyExchange)||void 0===a||a.start({isOriginator:null!==(s=e.state.isOriginator)&&void 0!==s&&s,force:!0}))}if(!O&&(null===(r=null==x?void 0:x.type)||void 0===r?void 0:r.startsWith("key_handshake"))){if(T)return;return g.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' emit KEY_EXCHANGE`,x),void e.emit(D.KEY_EXCHANGE,{message:x,context:e.state.context})}if(O&&!(null===(l=e.state.keyExchange)||void 0===l?void 0:l.areKeysExchanged())){let t=!1;try{g.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' trying to decrypt message`),null===(d=e.state.keyExchange)||void 0===d||d.decryptMessage(x),t=!0}catch(t){g.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' error`,t)}if(!t)return e.state.isOriginator?null===(h=e.state.keyExchange)||void 0===h||h.start({isOriginator:null!==(m=e.state.isOriginator)&&void 0!==m&&m}):e.sendMessage({type:P.KEY_HANDSHAKE_START}).catch((e=>{})),void g.SocketService(`Message ignored because invalid key exchange status. step=${null===(E=e.state.keyExchange)||void 0===E?void 0:E.getKeyInfo().step}`,null===(v=e.state.keyExchange)||void 0===v?void 0:v.getKeyInfo(),x);g.SocketService("Invalid key exchange status detected --- updating it."),null===(u=e.state.keyExchange)||void 0===u||u.setKeysExchanged(!0)}else if(!O&&(null==x?void 0:x.type))return void e.emit(R.MESSAGE,x);if(!O)return void e.emit(R.MESSAGE,x);const $=null===(y=e.state.keyExchange)||void 0===y?void 0:y.decryptMessage(x),w=JSON.parse(null!=$?$:"{}");if(K&&(null==K?void 0:K.length)>0&&(g.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' ackid=${K} channelId=${t}`),null===(S=e.state.socket)||void 0===S||S.emit(R.MESSAGE_ACK,{ackId:K,channelId:t,clientType:e.state.isOriginator?"dapp":"wallet"})),e.state.clientsPaused=(null==w?void 0:w.type)===b.PAUSE,e.state.isOriginator&&w.data){const t=w.data,n=e.state.rpcMethodTracker[t.id];if(n){const i=Date.now()-n.timestamp;g.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received answer for id=${t.id} method=${n.method} responseTime=${i}`,w),e.remote.state.analytics&&G.includes(n.method.toLowerCase())&&C(Object.assign(Object.assign({id:null!==(p=e.remote.state.channelId)&&void 0!==p?p:"",event:L.SDK_RPC_REQUEST_DONE,sdkVersion:e.remote.state.sdkVersion,commLayerVersion:f.version},e.remote.state.originatorInfo),{walletVersion:null===(k=e.remote.state.walletInfo)||void 0===k?void 0:k.version,params:{method:n.method,from:"mobile"}}),e.remote.state.communicationServerUrl).catch((e=>{})),N(n.method)&&c.track(t.error?4001===t.error.code?"sdk_action_rejected":"sdk_action_failed":"sdk_action_succeeded",{action:n.method});const o=Object.assign(Object.assign({},n),{result:t.result,error:t.error?{code:null===(_=t.error)||void 0===_?void 0:_.code,message:null===(I=t.error)||void 0===I?void 0:I.message}:void 0,elapsedTime:i});e.state.rpcMethodTracker[t.id]=o,e.emit(R.RPC_UPDATE,o)}}e.emit(R.MESSAGE,{message:w})}}},{event:R.REJECTED,handler:function(t,n){return i=>e(this,void 0,void 0,(function*(){var e;t.state.isOriginator&&!t.remote.state.ready?(g.SocketService(`[SocketService: handleChannelRejected()] context=${t.state.context} channelId=${n} isOriginator=${t.state.isOriginator} ready=${t.remote.state.ready}`,t.remote.state.originatorInfo),C(Object.assign(Object.assign({id:n,event:L.REJECTED},t.remote.state.originatorInfo),{sdkVersion:t.remote.state.sdkVersion,commLayer:t.state.communicationLayerPreference,commLayerVersion:f.version,walletVersion:null===(e=t.remote.state.walletInfo)||void 0===e?void 0:e.version}),t.remote.state.communicationServerUrl).catch((e=>{})),c.track("sdk_connection_rejected",{transport_type:"websocket"}),yield t.remote.disconnect({terminate:!0}),t.remote.emit(R.REJECTED,{channelId:n}),t.remote.setConnectionStatus(O.DISCONNECTED)):g.SocketService(`[SocketService: handleChannelRejected()] SKIP -- channelId=${n} isOriginator=${t.state.isOriginator} ready=${t.remote.state.ready}`)}))}},{event:"clients_waiting_to_join",handler:function(e,t){return n=>{g.SocketService(`[SocketService: handleClientsWaitingToJoin()] context=${e.state.context} on 'clients_waiting_to_join-${t}'`,n),e.emit(R.CLIENTS_WAITING,n)}}}],W=[{event:R.KEY_INFO,handler:function(e){return t=>{g.SocketService("[SocketService: handleKeyInfo()] on 'KEY_INFO'",t),e.emit(R.KEY_INFO,t)}}},{event:R.KEYS_EXCHANGED,handler:function(e){return()=>{var t,n,i;g.SocketService(`[SocketService: handleKeysExchanged()] on 'keys_exchanged' keyschanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`);const{channelConfig:o}=e.remote.state;if(o){const t=e.getKeyExchange().getKeyInfo().ecies;o.localKey=t.private,o.otherKey=t.otherPubKey,e.remote.state.channelConfig=o,null===(n=e.remote.state.storageManager)||void 0===n||n.persistChannelConfig(o).catch((e=>{}))}e.emit(R.KEYS_EXCHANGED,{keysExchanged:null===(i=e.state.keyExchange)||void 0===i?void 0:i.areKeysExchanged(),isOriginator:e.state.isOriginator});const a={keyInfo:e.getKeyInfo()};e.emit(R.SERVICE_STATUS,a)}}}];function F(e,t){g.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} setting socket listeners for channel ${t}...`);const{socket:n}=e.state,{keyExchange:i}=e.state;n&&e.state.isOriginator&&(e.state.debug&&(null==n||n.io.on("error",(t=>{g.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=error`,t)})),null==n||n.io.on("reconnect",(t=>{g.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect`,t),j(e).catch((e=>{}))})),null==n||n.io.on("reconnect_error",(t=>{g.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_error`,t)})),null==n||n.io.on("reconnect_failed",(()=>{g.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_failed`)}))),null==n||n.on("disconnect",(t=>(g.SocketService(`[SocketService: setupChannelListener()] on 'disconnect' -- MetaMaskSDK socket disconnected '${t}' begin recovery...`),function(e){return t=>{g.SocketService(`[SocketService: handleDisconnect()] on 'disconnect' manualDisconnect=${e.state.manualDisconnect}`,t),e.state.manualDisconnect||(e.emit(R.SOCKET_DISCONNECTED),j(e).catch((e=>{})))}}(e)(t))))),z.forEach((({event:i,handler:o})=>{null==n||n.on(`${i}-${t}`,o(e,t))})),W.forEach((({event:t,handler:n})=>{null==i||i.on(t,n(e))})),e.state.setupChannelListeners=!0}class J extends s{constructor(e){super(),this.state={clientsConnected:!1,clientsPaused:!1,manualDisconnect:!1,lastRpcId:void 0,rpcMethodTracker:{},hasPlaintext:!1,communicationServerUrl:"",focusListenerAdded:!1,removeFocusListener:void 0,isReconnecting:!1,reconnectionAttempts:0},this.options=e;const{reconnect:t,communicationLayerPreference:i,communicationServerUrl:o,context:a,remote:c,logging:s}=e;this.state.resumed=t,this.state.context=a,this.state.isOriginator=c.state.isOriginator,this.state.communicationLayerPreference=i,this.state.debug=!0===(null==s?void 0:s.serviceLayer),this.remote=c,!0===(null==s?void 0:s.serviceLayer)&&n.enable("SocketService:Layer"),this.state.communicationServerUrl=o,this.state.hasPlaintext=this.state.communicationServerUrl!==k&&!0===(null==s?void 0:s.plaintext),g.SocketService(`[SocketService: constructor()] Socket IO url: ${this.state.communicationServerUrl}`),this.initSocket()}initSocket(){var e;const{otherPublicKey:t,ecies:n,logging:i}=this.options,o={autoConnect:!1,transports:_,withCredentials:!0},a=this.state.communicationServerUrl;g.SocketService(`[SocketService: initSocket()] Socket IO url: ${a}`),this.state.socket=d(a,o),function(e){if("undefined"!=typeof window&&"undefined"!=typeof document&&(g.SocketService(`[SocketService: setupSocketFocusListener()] hasFocus=${document.hasFocus()}`,e),!e.state.focusListenerAdded)){const t=()=>{g.SocketService("Document has focus --- reconnecting socket"),j(e).catch((e=>{}))};window.addEventListener("focus",t),e.state.focusListenerAdded=!0,e.state.removeFocusListener=()=>{window.removeEventListener("focus",t),e.state.focusListenerAdded=!1}}}(this);const c={communicationLayer:this,otherPublicKey:t,sendPublicKey:!1,context:null!==(e=this.state.context)&&void 0!==e?e:"",ecies:n,logging:i};this.state.keyExchange=new $(c)}resetKeys(){return this,g.SocketService("[SocketService: resetKeys()] Resetting keys."),void(null===(e=this.state.keyExchange)||void 0===e||e.resetKeys());var e}createChannel(){return e(this,void 0,void 0,(function*(){return function(t){return e(this,void 0,void 0,(function*(){var n,i,o;if(g.SocketService(`[SocketService: createChannel()] context=${t.state.context}`),t.state.socket||t.initSocket(),null===(n=t.state.socket)||void 0===n?void 0:n.connected)throw new Error("socket already connected");null===(i=t.state.socket)||void 0===i||i.connect(),t.state.manualDisconnect=!1,t.state.isOriginator=!0;const a=l();t.state.channelId=a,F(t,a),yield new Promise(((n,i)=>{var o;null===(o=t.state.socket)||void 0===o||o.emit(R.JOIN_CHANNEL,{channelId:a,context:`${t.state.context}createChannel`,clientType:"dapp"},((o,a)=>e(this,void 0,void 0,(function*(){try{yield w(t,o,a),n()}catch(e){i(e)}}))))}));const c=null===(o=t.state.keyExchange)||void 0===o?void 0:o.getKeyInfo();return{channelId:a,pubKey:(null==c?void 0:c.ecies.public)||"",privKey:(null==c?void 0:c.ecies.private)||""}}))}(this)}))}connectToChannel({channelId:t,withKeyExchange:n=!1,authorized:i}){return function(t){return e(this,arguments,void 0,(function*({options:t,instance:n}){const{channelId:i,authorized:o,withKeyExchange:a}=t,{state:c,remote:s}=n,{isOriginator:r=!1,socket:l,keyExchange:d}=c,{channelConfig:u}=s.state;if(null==l?void 0:l.connected)throw new Error("socket already connected");if(r&&(null==u?void 0:u.relayPersistence)){const{localKey:e,otherKey:t}=u;e&&t&&(null==d||d.setRelayPersistence({localKey:e,otherKey:t}))}return Object.assign(c,{manualDisconnect:!1,withKeyExchange:a,isOriginator:r,channelId:i}),null==l||l.connect(),F(n,i),!r&&o&&(null==d||d.setKeysExchanged(!0),Object.assign(s.state,{ready:!0,authorized:!0})),new Promise((t=>{var a;const s=null===(a=null==d?void 0:d.getKeyInfo())||void 0===a?void 0:a.ecies.public;null==l||l.emit(R.JOIN_CHANNEL,{channelId:i,context:`${c.context}_connectToChannel`,clientType:r?"dapp":"wallet",publicKey:o&&!r?s:void 0},((i,o)=>e(this,void 0,void 0,(function*(){yield w(n,i,o),t()}))))}))}))}({options:{channelId:t,withKeyExchange:n,authorized:i},instance:this})}getKeyInfo(){return this.state.keyExchange.getKeyInfo()}keyCheck(){var e,t;null===(t=(e=this).state.socket)||void 0===t||t.emit(R.MESSAGE,{id:e.state.channelId,context:e.state.context,message:{type:P.KEY_HANDSHAKE_CHECK,pubkey:e.getKeyInfo().ecies.otherPubKey}})}getKeyExchange(){return this.state.keyExchange}sendMessage(t){return e(this,void 0,void 0,(function*(){return V(this,t)}))}ping(){return function(t){return e(this,void 0,void 0,(function*(){var e,n;g.SocketService(`[SocketService: ping()] context=${t.state.context} originator=${t.state.isOriginator} keysExchanged=${null===(e=t.state.keyExchange)||void 0===e?void 0:e.areKeysExchanged()}`),null===(n=t.state.socket)||void 0===n||n.emit(b.PING,{id:t.state.channelId,context:"ping",clientType:t.remote.state.isOriginator?"dapp":"wallet",message:""})}))}(this)}pause(){return function(t){return e(this,void 0,void 0,(function*(){var e,n;g.SocketService(`[SocketService: pause()] context=${t.state.context}`),t.state.manualDisconnect=!0,(null===(e=t.state.keyExchange)||void 0===e?void 0:e.areKeysExchanged())&&(yield t.sendMessage({type:b.PAUSE})),null===(n=t.state.socket)||void 0===n||n.disconnect()}))}(this)}isConnected(){var e;return null===(e=this.state.socket)||void 0===e?void 0:e.connected}resume(){return function(t){return e(this,void 0,void 0,(function*(){const{state:n,remote:i}=t,{socket:o,channelId:a,context:c,keyExchange:s,isOriginator:r}=n,{isOriginator:l}=i.state;if(g.SocketService(`[SocketService: resume()] channelId=${a} context=${c} connected=${null==o?void 0:o.connected} manualDisconnect=${n.manualDisconnect} resumed=${n.resumed} keysExchanged=${null==s?void 0:s.areKeysExchanged()}`),!a)throw g.SocketService("[SocketService: resume()] channelId is not defined"),new Error("ChannelId is not defined");(null==o?void 0:o.connected)?(g.SocketService("[SocketService: resume()] already connected."),o.emit(b.PING,{id:a,clientType:l?"dapp":"wallet",context:"on_channel_config",message:""}),i.hasRelayPersistence()||(null==s?void 0:s.areKeysExchanged())||(r?yield t.sendMessage({type:b.READY}):null==s||s.start({isOriginator:!1}))):(null==o||o.connect(),g.SocketService(`[SocketService: resume()] after connecting socket --\x3e connected=${null==o?void 0:o.connected}`),null==o||o.emit(R.JOIN_CHANNEL,{channelId:a,context:`${c}_resume`,clientType:l?"dapp":"wallet"},((n,i)=>e(this,void 0,void 0,(function*(){try{yield w(t,n,i)}catch(e){}}))))),n.manualDisconnect=!1,n.resumed=!0}))}(this)}getRPCMethodTracker(){return this.state.rpcMethodTracker}disconnect(e){return function(e,t){var n,i,o,a,c;g.SocketService(`[SocketService: disconnect()] context=${e.state.context}`,t),(null==t?void 0:t.terminate)&&(null===(i=(n=e.state).removeFocusListener)||void 0===i||i.call(n),e.state.channelId=t.channelId,null===(o=e.state.socket)||void 0===o||o.removeAllListeners(),null===(a=e.state.keyExchange)||void 0===a||a.clean(),e.remote.state.ready=!1,e.state.socket=void 0,e.state.rpcMethodTracker={}),e.state.manualDisconnect=!0,null===(c=e.state.socket)||void 0===c||c.disconnect()}(this,e)}}var B,Z,Q;function X(t){return()=>e(this,void 0,void 0,(function*(){var n,i,o;const{state:a}=t;if(a.authorized)return;yield(()=>e(this,void 0,void 0,(function*(){for(;!a.walletInfo;)yield M(500)})))();const c="7.3".localeCompare((null===(n=a.walletInfo)||void 0===n?void 0:n.version)||"");if(g.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' version=${null===(i=a.walletInfo)||void 0===i?void 0:i.version} compareValue=${c}`),1!==c)return;const s=a.platformType===Z.MobileWeb||a.platformType===Z.ReactNative||a.platformType===Z.MetaMaskMobileWebview;g.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' platform=${a.platformType} secure=${s} channel=${a.channelId} walletVersion=${null===(o=a.walletInfo)||void 0===o?void 0:o.version}`),s&&(a.authorized=!0,t.emit(R.AUTHORIZED))}))}function q(e){return t=>{const{state:n}=e;g.RemoteCommunication(`[RemoteCommunication: handleChannelCreatedEvent()] context=${n.context} on 'channel_created' channelId=${t}`),e.emit(R.CHANNEL_CREATED,t)}}function ee(e,t){return()=>{var n,i,o,a;const{state:s}=e;g.RemoteCommunication(`[RemoteCommunication: handleClientsConnectedEvent()] on 'clients_connected' channel=${s.channelId} keysExchanged=${null===(i=null===(n=s.communicationLayer)||void 0===n?void 0:n.getKeyInfo())||void 0===i?void 0:i.keysExchanged}`),s.analytics&&C(Object.assign(Object.assign({id:null!==(o=s.channelId)&&void 0!==o?o:"",event:s.reconnection?L.RECONNECT:s.isOriginator?L.REQUEST:L.REQUEST_MOBILE},s.originatorInfo),{commLayer:t,sdkVersion:s.sdkVersion,walletVersion:null===(a=s.walletInfo)||void 0===a?void 0:a.version,commLayerVersion:f.version}),s.communicationServerUrl).catch((e=>{})),s.isOriginator&&!s.reconnection&&c.track("sdk_connection_established",{transport_type:"websocket"}),s.clientsConnected=!0,s.originatorInfoSent=!1,e.emit(R.CLIENTS_CONNECTED)}}function te(e){return t=>{const{state:n}=e;g.RemoteCommunication(`[RemoteCommunication: handleClientsDisconnectedEvent()] context=${n.context} on 'clients_disconnected' channelId=${t}`),n.relayPersistence||(n.clientsConnected=!1,n.ready=!1,n.authorized=!1),e.emit(R.CLIENTS_DISCONNECTED,n.channelId),e.setConnectionStatus(O.DISCONNECTED)}}function ne(e){return t=>{var n;const{state:i}=e;if(g.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] context=${i.context} on 'clients_waiting' numberUsers=${t} ready=${i.ready} autoStarted=${i.originatorConnectStarted}`),e.setConnectionStatus(O.WAITING),e.emit(R.CLIENTS_WAITING,t),i.originatorConnectStarted){g.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] on 'clients_waiting' watch autoStarted=${i.originatorConnectStarted} timeout`,i.autoConnectOptions);const t=(null===(n=i.autoConnectOptions)||void 0===n?void 0:n.timeout)||3e3,o=setTimeout((()=>{g.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] setTimeout(${t}) terminate channelConfig`,i.autoConnectOptions),i.originatorConnectStarted=!1,i.ready||e.setConnectionStatus(O.TIMEOUT),clearTimeout(o)}),t)}}}function ie(e,t){return n=>{var i,o,a,c,s,r,l,d;const{state:u}=e;if(g.RemoteCommunication(`[RemoteCommunication: handleKeysExchangedEvent()] context=${u.context} on commLayer.'keys_exchanged' channel=${u.channelId}`,n),null===(o=null===(i=u.communicationLayer)||void 0===i?void 0:i.getKeyInfo())||void 0===o?void 0:o.keysExchanged){const t=Object.assign(Object.assign({},u.channelConfig),{channelId:null!==(a=u.channelId)&&void 0!==a?a:"",validUntil:(null===(c=u.channelConfig)||void 0===c?void 0:c.validUntil)||I,localKey:u.communicationLayer.getKeyInfo().ecies.private,otherKey:u.communicationLayer.getKeyInfo().ecies.otherPubKey});null===(s=u.storageManager)||void 0===s||s.persistChannelConfig(t).catch((e=>{})),e.setConnectionStatus(O.LINKED)}!function(e,t){var n,i,o,a,c,s,r,l;const{state:d}=e;g.RemoteCommunication(`[RemoteCommunication: setLastActiveDate()] channel=${d.channelId}`,t);const u=Object.assign(Object.assign({},d.channelConfig),{channelId:null!==(n=d.channelId)&&void 0!==n?n:"",validUntil:null!==(o=null===(i=d.channelConfig)||void 0===i?void 0:i.validUntil)&&void 0!==o?o:0,relayPersistence:d.relayPersistence,localKey:null===(c=null===(a=d.communicationLayer)||void 0===a?void 0:a.state.keyExchange)||void 0===c?void 0:c.getKeyInfo().ecies.private,otherKey:null===(r=null===(s=d.communicationLayer)||void 0===s?void 0:s.state.keyExchange)||void 0===r?void 0:r.getKeyInfo().ecies.otherPubKey,lastActive:t.getTime()});null===(l=d.storageManager)||void 0===l||l.persistChannelConfig(u)}(e,new Date),u.analytics&&u.channelId&&C(Object.assign(Object.assign({id:u.channelId,event:n.isOriginator?L.CONNECTED:L.CONNECTED_MOBILE},u.originatorInfo),{sdkVersion:u.sdkVersion,commLayer:t,commLayerVersion:f.version,walletVersion:null===(r=u.walletInfo)||void 0===r?void 0:r.version}),u.communicationServerUrl).catch((e=>{})),u.isOriginator=n.isOriginator,n.isOriginator||(null===(l=u.communicationLayer)||void 0===l||l.sendMessage({type:b.READY}),u.ready=!0,u.paused=!1),n.isOriginator&&!u.originatorInfoSent&&(null===(d=u.communicationLayer)||void 0===d||d.sendMessage({type:b.ORIGINATOR_INFO,originatorInfo:u.originatorInfo,originator:u.originatorInfo}),u.originatorInfoSent=!0)}}function oe(t){return n=>{let i=n;n.message&&(i=i.message),function(t,n){const{state:i}=n;if(g.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] context=${i.context} on 'message' typeof=${typeof t}`,t),n.state.ready=!0,i.isOriginator||t.type!==b.ORIGINATOR_INFO)if(i.isOriginator&&t.type===b.WALLET_INFO)!function(e,t){const{state:n}=e;n.walletInfo=t.walletInfo,n.paused=!1}(n,t);else{if(i.isOriginator&&t.type===b.WALLET_INIT)(function(t,n){return e(this,void 0,void 0,(function*(){var e,i,o;const{state:a}=t;if(a.isOriginator){const a=n.data||{};if("object"==typeof a&&"accounts"in a&&"chainId"in a&&"walletKey"in a)try{const{channelConfig:n}=t.state;if(g.RemoteCommunication("WALLET_INIT: channelConfig",JSON.stringify(n,null,2)),n){const c=a.accounts,s=a.chainId,r=a.walletKey;let l,d=!1;"deeplinkProtocol"in a&&(d=Boolean(a.deeplinkProtocol),t.state.deeplinkProtocolAvailable=d),"walletVersion"in a&&(l=a.walletVersion),yield null===(e=t.state.storageManager)||void 0===e?void 0:e.persistChannelConfig(Object.assign(Object.assign({},n),{otherKey:r,walletVersion:l,deeplinkProtocolAvailable:d,relayPersistence:!0})),yield null===(i=t.state.storageManager)||void 0===i?void 0:i.persistAccounts(c),yield null===(o=t.state.storageManager)||void 0===o?void 0:o.persistChainId(s)}t.emit(R.WALLET_INIT,{accounts:a.accounts,chainId:a.chainId})}catch(e){}}}))})(n,t).catch((e=>{g.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] error=${e}`)}));else if(t.type===b.TERMINATE)(function(t){return e(this,void 0,void 0,(function*(){const{state:e}=t;e.isOriginator&&(yield le({options:{terminate:!0,sendMessage:!1},instance:t}),t.emit(R.TERMINATE))}))})(n).catch((e=>{g.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] error=${e}`)}));else if(t.type===b.PAUSE)!function(e){const{state:t}=e;t.paused=!0,e.setConnectionStatus(O.PAUSED)}(n);else if(t.type===b.READY&&i.isOriginator)!function(e){const{state:t}=e;e.setConnectionStatus(O.LINKED);const n=t.paused;t.paused=!1,e.emit(R.CLIENTS_READY,{isOriginator:t.isOriginator,walletInfo:t.walletInfo}),n&&(t.authorized=!0,e.emit(R.AUTHORIZED))}(n);else{if(t.type===b.OTP&&i.isOriginator)return void function(e,t){var n;const{state:i}=e;e.emit(R.OTP,t.otpAnswer),1==="6.6".localeCompare((null===(n=i.walletInfo)||void 0===n?void 0:n.version)||"")&&e.emit(R.SDK_RPC_CALL,{method:x.ETH_REQUESTACCOUNTS,params:[]})}(n,t);t.type===b.AUTHORIZED&&i.isOriginator&&function(e){const{state:t}=e;t.authorized=!0,e.emit(R.AUTHORIZED)}(n)}n.emit(R.MESSAGE,t)}else!function(e,t){var n;const{state:i}=e;null===(n=i.communicationLayer)||void 0===n||n.sendMessage({type:b.WALLET_INFO,walletInfo:i.walletInfo}),i.originatorInfo=t.originatorInfo||t.originator,e.emit(R.CLIENTS_READY,{isOriginator:i.isOriginator,originatorInfo:i.originatorInfo}),i.paused=!1}(n,t)}(i,t)}}function ae(e){return()=>{const{state:t}=e;g.RemoteCommunication("[RemoteCommunication: handleSocketReconnectEvent()] on 'socket_reconnect' -- reset key exchange status / set ready to false"),t.ready=!1,t.authorized=!1,T(t),e.emitServiceStatusEvent({context:"socket_reconnect"})}}function ce(e){return()=>{const{state:t}=e;g.RemoteCommunication("[RemoteCommunication: handleSocketDisconnectedEvent()] on 'socket_Disconnected' set ready to false"),t.ready=!1}}function se(t){return()=>e(this,void 0,void 0,(function*(){var e,n,i,o,a,c,s;const{state:r}=t;g.RemoteCommunication(`[RemoteCommunication: handleFullPersistenceEvent()] context=${r.context}`),t.state.ready=!0,t.state.clientsConnected=!0,t.state.authorized=!0,t.state.relayPersistence=!0,null===(e=t.state.communicationLayer)||void 0===e||e.getKeyExchange().setKeysExchanged(!0),t.emit(R.KEYS_EXCHANGED,{keysExchanged:!0,isOriginator:!0}),t.emit(R.AUTHORIZED),t.emit(R.CLIENTS_READY),t.emit(R.CHANNEL_PERSISTENCE);try{r.channelConfig=Object.assign(Object.assign({},r.channelConfig),{localKey:null===(n=r.communicationLayer)||void 0===n?void 0:n.getKeyExchange().getKeyInfo().ecies.private,otherKey:null===(i=r.communicationLayer)||void 0===i?void 0:i.getKeyExchange().getOtherPublicKey(),channelId:null!==(o=r.channelId)&&void 0!==o?o:"",validUntil:null!==(c=null===(a=r.channelConfig)||void 0===a?void 0:a.validUntil)&&void 0!==c?c:I,relayPersistence:!0}),yield null===(s=r.storageManager)||void 0===s?void 0:s.persistChannelConfig(r.channelConfig)}catch(e){}}))}function re({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:i,communicationServerUrl:o=k,instance:a}){var c,s,r,l,d,u,h,m,E,v,y;const{state:S}=a;if(g.RemoteCommunication("[initCommunicationLayer()] ",JSON.stringify(S,null,2)),e!==B.SOCKET)throw new Error("Invalid communication protocol");S.communicationLayer=new J({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,transports:S.transports,communicationServerUrl:o,context:S.context,ecies:i,logging:S.logging,remote:a});let C="undefined"!=typeof document&&document.URL||"",p="undefined"!=typeof document&&document.title||"";(null===(c=S.dappMetadata)||void 0===c?void 0:c.url)&&(C=S.dappMetadata.url),(null===(s=S.dappMetadata)||void 0===s?void 0:s.name)&&(p=S.dappMetadata.name);const _=null!==(u=null!==(l=null===(r=S.dappMetadata)||void 0===r?void 0:r.name)&&void 0!==l?l:null===(d=S.dappMetadata)||void 0===d?void 0:d.url)&&void 0!==u?u:"N/A",I="undefined"!=typeof window&&void 0!==window.location&&null!==(h=window.location.hostname)&&void 0!==h?h:_,K={url:C,title:p,source:null===(m=S.dappMetadata)||void 0===m?void 0:m.source,dappId:I,anonId:S.anonId,icon:(null===(E=S.dappMetadata)||void 0===E?void 0:E.iconUrl)||(null===(v=S.dappMetadata)||void 0===v?void 0:v.base64Icon),platform:S.platformType,apiVersion:f.version,connector:null===(y=S.dappMetadata)||void 0===y?void 0:y.connector};S.originatorInfo=K;const x={[R.AUTHORIZED]:X(a),[R.MESSAGE]:oe(a),[R.CHANNEL_PERSISTENCE]:se(a),[R.CLIENTS_CONNECTED]:ee(a,e),[R.KEYS_EXCHANGED]:ie(a,e),[R.SOCKET_DISCONNECTED]:ce(a),[R.SOCKET_RECONNECT]:ae(a),[R.CLIENTS_DISCONNECTED]:te(a),[R.KEY_INFO]:()=>{},[R.CHANNEL_CREATED]:q(a),[R.CLIENTS_WAITING]:ne(a),[R.RPC_UPDATE]:e=>{a.emit(R.RPC_UPDATE,e)}};for(const[e,t]of Object.entries(x))try{S.communicationLayer.on(e,t)}catch(e){}}function le(t){return e(this,arguments,void 0,(function*({options:e,instance:t}){const{state:n}=t;return g.RemoteCommunication(`[RemoteCommunication: disconnect()] channel=${n.channelId}`,e),new Promise(((i,o)=>{var a,c,s,r,d,u;(null==e?void 0:e.terminate)?(t.state.ready&&C({id:null!==(a=t.state.channelId)&&void 0!==a?a:"",event:L.TERMINATED},t.state.communicationServerUrl).catch((e=>{})),n.ready=!1,n.paused=!1,null===(c=n.storageManager)||void 0===c||c.terminate(null!==(s=n.channelId)&&void 0!==s?s:""),t.state.terminated=!0,e.sendMessage?(null===(r=n.communicationLayer)||void 0===r?void 0:r.getKeyInfo().keysExchanged)&&t.state.communicationLayer&&Y(t.state.communicationLayer,{type:b.TERMINATE}).then((()=>{i(!0)})).catch((e=>{o(e)})):i(!0),n.authorized=!1,n.relayPersistence=!1,n.channelId=l(),e.channelId=n.channelId,n.channelConfig=void 0,n.originatorConnectStarted=!1,null===(d=n.communicationLayer)||void 0===d||d.disconnect(e),t.setConnectionStatus(O.TERMINATED)):(null===(u=n.communicationLayer)||void 0===u||u.disconnect(e),t.setConnectionStatus(O.DISCONNECTED),i(!0))}))}))}!function(e){e.SOCKET="socket"}(B||(B={})),function(e){e.NonBrowser="nodejs",e.MetaMaskMobileWebview="in-app-browser",e.DesktopWeb="web-desktop",e.MobileWeb="web-mobile",e.ReactNative="react-native"}(Z||(Z={}));class de extends s{constructor(e){super(),this.state={ready:!1,anonId:"",authorized:!1,isOriginator:!1,terminated:!1,protocolVersion:1,paused:!1,deeplinkProtocolAvailable:!1,platformType:"metamask-mobile",analytics:!1,reconnection:!1,originatorInfoSent:!1,communicationServerUrl:k,context:"",persist:!1,clientsConnected:!1,sessionDuration:I,originatorConnectStarted:!1,debug:!1,_connectionStatus:O.DISCONNECTED},this._options=e;const{anonId:t,platformType:i,communicationLayerPreference:o,otherPublicKey:a,reconnect:c,walletInfo:s,dappMetadata:r,protocolVersion:l,transports:d,context:u,relayPersistence:h,ecies:m,analytics:E=!1,storage:v,sdkVersion:y,communicationServerUrl:S=k,logging:C,autoConnect:p={timeout:K}}=e;this.state.anonId=t,this.state.otherPublicKey=a,this.state.dappMetadata=r,this.state.walletInfo=s,this.state.transports=d,this.state.platformType=i,this.state.analytics=E,this.state.protocolVersion=null!=l?l:1,this.state.isOriginator=!a,this.state.relayPersistence=h,this.state.communicationServerUrl=S,this.state.context=u,this.state.terminated=!1,this.state.sdkVersion=y,this.setMaxListeners(50),this.setConnectionStatus(O.DISCONNECTED),(null==v?void 0:v.duration)&&(this.state.sessionDuration=I),this.state.storageOptions=v,this.state.autoConnectOptions=p,this.state.debug=!0===(null==C?void 0:C.remoteLayer),!0===(null==C?void 0:C.remoteLayer)&&n.enable("RemoteCommunication:Layer"),!0===(null==C?void 0:C.serviceLayer)&&n.enable("SocketService:Layer"),!0===(null==C?void 0:C.eciesLayer)&&n.enable("ECIES:Layer"),!0===(null==C?void 0:C.keyExchangeLayer)&&n.enable("KeyExchange:Layer"),this.state.logging=C,(null==v?void 0:v.storageManager)&&(this.state.storageManager=v.storageManager),g.RemoteCommunication(`[RemoteCommunication: constructor()] protocolVersion=${l} relayPersistence=${h} isOriginator=${this.state.isOriginator} communicationLayerPreference=${o} otherPublicKey=${a} reconnect=${c}`),this.state.isOriginator||re({communicationLayerPreference:o,otherPublicKey:a,reconnect:c,ecies:m,communicationServerUrl:S,instance:this}),this.emitServiceStatusEvent({context:"constructor"})}initFromDappStorage(){return e(this,void 0,void 0,(function*(){var e;if(this.state.storageManager){const t=yield this.state.storageManager.getPersistedChannelConfig({});t&&(this.state.channelConfig=t,this.state.channelId=t.channelId,this.state.deeplinkProtocolAvailable=null!==(e=t.deeplinkProtocolAvailable)&&void 0!==e&&e,t.relayPersistence&&(this.state.authorized=!0,this.state.ready=!0,this.setConnectionStatus(O.LINKED),yield this.connectToChannel({channelId:t.channelId})))}re({communicationLayerPreference:B.SOCKET,otherPublicKey:this.state.otherPublicKey,reconnect:this._options.reconnect,ecies:this._options.ecies,communicationServerUrl:this.state.communicationServerUrl,instance:this})}))}originatorSessionConnect(){return e(this,void 0,void 0,(function*(){return yield function(t){return e(this,void 0,void 0,(function*(){var e;const{state:n}=t;if(!n.storageManager)return void g.RemoteCommunication("[RemoteCommunication: originatorSessionConnect()] no storage manager defined - skip");const i=yield n.storageManager.getPersistedChannelConfig({});if(g.RemoteCommunication(`[RemoteCommunication: originatorSessionConnect()] autoStarted=${n.originatorConnectStarted} channelConfig`,i),null===(e=n.communicationLayer)||void 0===e?void 0:e.isConnected())return g.RemoteCommunication("[RemoteCommunication: originatorSessionConnect()] socket already connected - skip"),i;if(i){if(i.validUntil>Date.now())return n.channelConfig=i,n.originatorConnectStarted=!0,n.channelId=null==i?void 0:i.channelId,n.reconnection=!0,i;g.RemoteCommunication("[RemoteCommunication: autoConnect()] Session has expired")}n.originatorConnectStarted=!1}))}(this)}))}generateChannelIdConnect(){return e(this,void 0,void 0,(function*(){return function(t){return e(this,void 0,void 0,(function*(){var e,n,i,o,a,c;if(!t.communicationLayer)throw new Error("communication layer not initialized");if(t.ready)throw new Error("Channel already connected");if(t.channelId&&(null===(e=t.communicationLayer)||void 0===e?void 0:e.isConnected()))return t.channelConfig=Object.assign(Object.assign({},t.channelConfig),{channelId:t.channelId,validUntil:Date.now()+t.sessionDuration}),null===(n=t.storageManager)||void 0===n||n.persistChannelConfig(t.channelConfig),{channelId:t.channelId,privKey:null===(o=null===(i=t.communicationLayer)||void 0===i?void 0:i.getKeyInfo())||void 0===o?void 0:o.ecies.private,pubKey:null===(c=null===(a=t.communicationLayer)||void 0===a?void 0:a.getKeyInfo())||void 0===c?void 0:c.ecies.public};g.RemoteCommunication("[RemoteCommunication: generateChannelId()]");const s=yield t.communicationLayer.createChannel();g.RemoteCommunication("[RemoteCommunication: generateChannelId()] channel created",s);const r=Object.assign(Object.assign({},t.channelConfig),{channelId:s.channelId,localKey:s.privKey,validUntil:Date.now()+t.sessionDuration});return t.channelId=s.channelId,t.channelConfig=r,{channelId:t.channelId,pubKey:s.pubKey,privKey:s.privKey}}))}(this.state)}))}clean(){return T(this.state)}connectToChannel({channelId:t,withKeyExchange:n,authorized:i}){return function(t){return e(this,arguments,void 0,(function*({channelId:e,withKeyExchange:t,authorized:n,state:i}){var o,a,c;if(!r(e))throw g.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${i.context} invalid channel channelId=${e}`),new Error(`Invalid channel ${e}`);if(g.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${i.context} channelId=${e} withKeyExchange=${t}`),null===(o=i.communicationLayer)||void 0===o?void 0:o.isConnected())return void g.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${i.context} already connected - interrupt connection.`);i.channelId=e,yield null===(a=i.communicationLayer)||void 0===a?void 0:a.connectToChannel({channelId:e,authorized:n,withKeyExchange:t});const s=Object.assign(Object.assign({},i.channelConfig),{channelId:e,validUntil:Date.now()+i.sessionDuration});i.channelConfig=s,null===(c=i.storageManager)||void 0===c||c.persistChannelConfig(s)}))}({channelId:t,authorized:i,withKeyExchange:n,state:this.state})}sendMessage(t){return e(this,void 0,void 0,(function*(){const n=this.state.isOriginator&&t.method&&N(t.method);n&&c.track("sdk_action_requested",{action:t.method});try{return yield function(t,n){return e(this,void 0,void 0,(function*(){var i,o;const{state:a}=t;g.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${a.context} paused=${a.paused} ready=${a.ready} relayPersistence=${a.relayPersistence} authorized=${a.authorized} socket=${null===(i=a.communicationLayer)||void 0===i?void 0:i.isConnected()} clientsConnected=${a.clientsConnected} status=${a._connectionStatus}`,n),a.relayPersistence||a.ready&&(null===(o=a.communicationLayer)||void 0===o?void 0:o.isConnected())&&a.clientsConnected||(g.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${a.context}  SKIP message waiting for MM mobile readiness.`),yield new Promise((e=>{t.once(R.CLIENTS_READY,e)})),g.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${a.context}  AFTER SKIP / READY -- sending pending message`));try{const i=yield function(t,n){return e(this,void 0,void 0,(function*(){return new Promise((e=>{var i;const{state:o}=t;g.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${o.context} ready=${o.ready} authorized=${o.authorized} method=${n.method}`),!o.isOriginator||o.authorized||o.relayPersistence?null===(i=o.communicationLayer)||void 0===i||i.sendMessage(n).then((t=>{e(t)})).catch((t=>{e(!1)})):t.once(R.AUTHORIZED,(()=>{var t;g.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${o.context}  AFTER SKIP / AUTHORIZED -- sending pending message`),null===(t=o.communicationLayer)||void 0===t||t.sendMessage(n).then((t=>{e(t)})).catch((t=>{e(!1)}))}))}))}))}(t,n);return i}catch(e){throw e}}))}(this,t)}catch(e){throw n&&c.track("sdk_action_failed",{action:t.method}),e}}))}testStorage(){return e(this,void 0,void 0,(function*(){return function(t){return e(this,void 0,void 0,(function*(){var e;const n=yield null===(e=t.storageManager)||void 0===e?void 0:e.getPersistedChannelConfig();g.RemoteCommunication("[RemoteCommunication: testStorage()] res",n)}))}(this.state)}))}hasDeeplinkProtocol(){return this.state.deeplinkProtocolAvailable}getChannelConfig(){return this.state.channelConfig}isReady(){return this.state.ready}isConnected(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.isConnected()}isAuthorized(){return this.state.authorized}isPaused(){return this.state.paused}getCommunicationLayer(){return this.state.communicationLayer}ping(){return e(this,void 0,void 0,(function*(){var e;g.RemoteCommunication(`[RemoteCommunication: ping()] channel=${this.state.channelId}`),yield null===(e=this.state.communicationLayer)||void 0===e?void 0:e.ping()}))}testLogger(){g.RemoteCommunication(`testLogger() channel=${this.state.channelId}`),g.SocketService(`testLogger() channel=${this.state.channelId}`),g.Ecies(`testLogger() channel=${this.state.channelId}`),g.KeyExchange(`testLogger() channel=${this.state.channelId}`)}keyCheck(){var e;g.RemoteCommunication(`[RemoteCommunication: keyCheck()] channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.keyCheck()}setConnectionStatus(e){this.state._connectionStatus!==e&&(this.state._connectionStatus=e,this.emit(R.CONNECTION_STATUS,e),this.emitServiceStatusEvent({context:"setConnectionStatus"}))}emitServiceStatusEvent(e={}){this.emit(R.SERVICE_STATUS,this.getServiceStatus())}getConnectionStatus(){return this.state._connectionStatus}getServiceStatus(){return{originatorInfo:this.state.originatorInfo,keyInfo:this.getKeyInfo(),connectionStatus:this.state._connectionStatus,channelConfig:this.state.channelConfig,channelId:this.state.channelId}}getKeyInfo(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getKeyInfo()}resetKeys(){var e;null===(e=this.state.communicationLayer)||void 0===e||e.resetKeys()}setOtherPublicKey(e){var t;const n=null===(t=this.state.communicationLayer)||void 0===t?void 0:t.getKeyExchange();if(!n)throw new Error("KeyExchange is not initialized.");n.getOtherPublicKey()!==e&&n.setOtherPublicKey(e)}pause(){return e(this,void 0,void 0,(function*(){var e;g.RemoteCommunication(`[RemoteCommunication: pause()] channel=${this.state.channelId}`),yield null===(e=this.state.communicationLayer)||void 0===e?void 0:e.pause(),this.setConnectionStatus(O.PAUSED)}))}getVersion(){return f.version}hasRelayPersistence(){var e;return null!==(e=this.state.relayPersistence)&&void 0!==e&&e}resume(){return e(this,void 0,void 0,(function*(){return function(t){return e(this,void 0,void 0,(function*(){var e;const{state:n}=t;g.RemoteCommunication(`[RemoteCommunication: resume()] channel=${n.channelId}`),yield null===(e=n.communicationLayer)||void 0===e?void 0:e.resume(),t.setConnectionStatus(O.LINKED)}))}(this)}))}encrypt(e){var t,n,i;const o=null===(t=this.state.communicationLayer)||void 0===t?void 0:t.getKeyExchange(),a=null==o?void 0:o.getOtherPublicKey();if(!a)throw new Error("KeyExchange not completed");return null===(i=null===(n=this.state.communicationLayer)||void 0===n?void 0:n.state.eciesInstance)||void 0===i?void 0:i.encrypt(e,a)}decrypt(e){var t,n,i;if(!(null===(t=this.state.communicationLayer)||void 0===t?void 0:t.state.eciesInstance))throw new Error("ECIES instance is not initialized");return null===(i=null===(n=this.state.communicationLayer)||void 0===n?void 0:n.state.eciesInstance)||void 0===i?void 0:i.decrypt(e)}getChannelId(){return this.state.channelId}getRPCMethodTracker(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getRPCMethodTracker()}reject({channelId:t}){return function(t){return e(this,arguments,void 0,(function*({channelId:e,state:t}){var n,i,o;if(!r(e))throw g.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${t.context} invalid channel channelId=${e}`),new Error(`Invalid channel ${e}`);if(t.isOriginator)return void g.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} isOriginator=${t.isOriginator} channelId=${e}`);const{socket:a}=null!==(i=null===(n=t.communicationLayer)||void 0===n?void 0:n.state)&&void 0!==i?i:{};(null==a?void 0:a.connected)||(g.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} socket already connected`),null==a||a.connect()),C(Object.assign(Object.assign({id:e,event:L.REJECTED},t.originatorInfo),{sdkVersion:t.sdkVersion,commLayerVersion:f.version,walletVersion:null===(o=t.walletInfo)||void 0===o?void 0:o.version}),t.communicationServerUrl).catch((e=>{})),yield new Promise(((n,i)=>{null==a||a.emit(R.REJECTED,{channelId:e},((e,o)=>{g.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} socket=${null==a?void 0:a.id}`,{error:e,response:o}),e?i(e):n(o)}))}))}))}({channelId:t,state:this.state})}disconnect(t){return e(this,void 0,void 0,(function*(){return le({options:t,instance:this})}))}}!function(e){e.RENEW="renew",e.LINK="link"}(Q||(Q={}));export{Q as AutoConnectType,B as CommunicationLayerPreference,O as ConnectionStatus,k as DEFAULT_SERVER_URL,I as DEFAULT_SESSION_TIMEOUT_MS,p as ECIES,R as EventType,P as KeyExchangeMessageType,b as MessageType,Z as PlatformType,de as RemoteCommunication,C as SendAnalytics,J as SocketService,L as TrackingEvents,N as isAnalyticsTrackedRpcMethod};
//# sourceMappingURL=metamask-sdk-communication-layer.js.map
